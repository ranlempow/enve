#!/bin/sh


if [ -n "${HAVE_ENVE_FINDUTILS:-}" ]; then
    return 0
fi
HAVE_ENVE_FINDUTILS=1


newl="$(printf '\nx')"
newl="${newl%x}"



# fnmatch_pathname_transform() {
#     pat="$1"
#     pat="${pat//\/\*\*\//\/!!!!!\/}"
#     pat="${pat//\*\*\//!!!!!\/}"
#     pat="${pat//\/\*\*/\/!!!!!}"
#     if [ "$pat" != "${pat//\*\*/}" ]; then
#         return 1
#     fi
#     pat="${pat//\*/\+\(\[\!\/\]\)}"
#     pat="${pat//\?/\@\(\[\!\/\]\)}"
#     pat="${pat//!!!!!\//\@\(\+\(\?\)\/\|\)}"   # replace to @(+(?)/|)
#     pat="${pat//!!!!!/\*}"
#     printf %s\\n "$pat"
# }


# fnmatch_pathname_transform_ere_old() {
#     sed -E \
#         -e 's#([\[\]\(\)\{\}\.\^\$\+\|])#\\\1#g' \
#         -e 's#([^*]|^)\*([^*]|$)#\1[^/]+\2#g' \
#         -e 's#/\*\*(/?)#/.*\1#g' \
#         -e 's#\*\*/#(.+/|)#g' \
#         -e 's#\?#[^/]#g'
#     # -e 's#\*#[^/]+#g' \
# }


fnmatch_pathname_transform_ere() {
    # fixed: grep: empty (sub)expression

    pat2=$(
    while read -r pat; do
        if [ -z "$pat" ]; then continue; fi
        # pat_without_endslash=${pat%/}
        # if  [ "${pat_without_endslash#*/}" = "$pat_without_endslash" ]; then
        #     # If there is a separator at the beginning or middle (or both)
        #     # of the pattern, then the pattern is relative to the .gitignore file
        #     # > Otherwise the pattern may also match at any level below the .gitignore level
        #     pat="**/${pat#/}"
        # fi
        if [ "${pat#*/?}" = "${pat}" ]; then
            printf %s\\n "$pat"
            pat="**/${pat}"
        fi
        if [ "${pat#${pat%?}}" = "/" ]; then
            # If there is a separator at the end of the pattern
            # then the pattern will only match directories
            pat="${pat}**"
        elif [ "${pat#${pat%??}}" = "/*" ]; then
            # /* at end should match both files and directories
            # pat="${pat%??}/**"
            :
        elif [ "${pat#${pat%???}}" = "/**" ]; then
            :
        else
            # otherwise the pattern can match both files and directories
            pat="${pat}${newl}${pat}/**"
        fi
        printf %s\\n "$pat"
    done <<EOF
$1
EOF
)
    # 1st line: esacpe all symbol
    # 2nd line: single *
    # 3rd line: double ** at subdir
    # 4rd line: double ** at beginning
    # 5rd line: questmark ?, represent any character

    sed -E \
        -e 's#([\[\]\(\)\{\}\.\^\$\+\|\ ])#\\\1#g' \
        -e 's#([^*]|^)\*([^*]|$)#\1[^/][^/]*\2#g' \
        -e 's#/\*\*(/?)#/.*?\1#g' \
        -e 's#\*\*/#.*?/#g' \
        -e 's#\?#[^/]#g' <<EOF
$pat2
EOF

}


_load_ex_add() {
    exclude_pats=
    addbacks_pats=
    while read -r pat; do
        [ -z "$pat" ] && continue
        [ "${pat%${pat#?}}" = "#" ] && continue
        if [ "${pat%${pat#?}}" = "!" ]; then
            addbacks_pats="$addbacks_pats${pat#?}$newl"
        else
            exclude_pats="$exclude_pats$pat$newl"
        fi
    done <<EOF
$1
EOF

}

_genre() {
    RE=
    while read -r ere; do
        RE="$RE -e '^$ere\$'"
    done <<EOF
$(fnmatch_pathname_transform_ere "$1")
EOF
}


gitignore_exclude() {
    # 先用exclude_pats篩選出移除清單
    # 再對移除清單用addbacks_pats篩選
    _load_ex_add "$1"

    if [ -z "$exclude_pats" ]; then
        :
    elif [ -z "$addbacks_pats" ]; then
        _genre "$exclude_pats"
        trace "RE:$newl$RE"

        eval grep "$RE" <<EOF
$2
EOF
    else
        _genre "$exclude_pats"
        RE1=$RE
        _genre "$addbacks_pats"
        eval grep "$RE" <<EOF
$(eval grep "$RE1" <<EOF2
$2
EOF2
)
EOF
    fi
}


gitignore_include() {
    # 用exclude_pats逆向篩選出包含清單
    # 用addbacks_pats篩選出包含清單
    _load_ex_add "$1"

    if [ -z "$exclude_pats" ]; then
        printf %s\n "$2"
    elif [ -z "$addbacks_pats" ]; then
        _genre "$exclude_pats"
        trace "RE:$newl$RE"
        eval grep -v "$RE" <<EOF
$2
EOF

    else
        _genre "$exclude_pats"
        RE1=$RE
        _genre "$addbacks_pats"
        eval grep -v "$RE1" <<EOF
$2
EOF
        data2=$(eval grep -P "$RE1" <<EOF
$2
EOF
)
        eval grep "$RE" <<EOF
$data2
EOF
    fi
}


# _listdir_additem() {
#     case $line in
#         '')             _CURDIR=__READ_DIRNAME__ ;;
#         ./|../|*\?*)    ;;
#         */)             if [ -z "${fileonly:-}" ]; then
#                             _list="${_list}${_CURDIR}$line$newl";
#                         fi
#                         ;;
#         *)              _list="${_list}${_CURDIR}$line$newl" ;;
#     esac
# }


listdir() {
    _list=
    if [ "$#" -eq 1 ]; then
        _CURDIR=${1%/}/
    else
        _CURDIR=
    fi
    ls_result=$(ls -1Aqp${recursive:+R} "$@")

    fileonly=${fileonly:-}
    useprint=${useprint:-}
    # _clock 'listdir1'
    _pwd=${PWD%/}
    while read -r line; do
        case ${_CURDIR}\|$line in
            ?*\|./|?*\|../|?*\|*\?*|?*\|*:)    ;;
            ?*\|*/)                     if [ -z "${fileonly}" ]; then
                                            if [ -z "$useprint" ]; then
                                                _list="${_list}${_CURDIR}$line$newl";
                                            else
                                                printf %s\\n "${_CURDIR}$line"
                                            fi
                                        fi
                                        ;;
            ?*\|?*)                     if [ -z "$useprint" ]; then
                                            _list="${_list}${_CURDIR}$line$newl";
                                        else
                                            printf %s\\n "${_CURDIR}$line"
                                        fi
                                        ;;
            # state: __READ_DIRNAME__
            \|/*:)
                    # TODO: more advence normalize
                    _CURDIR="${line%:}/"
                ;;
            \|*:)
                    _CURDIR="${line%:}/"
                    _CURDIR="${_pwd}/${_CURDIR}"
                ;;
            \|*)
                    error '`ls -1aqpR` print a non-posix compatible list, which can not be parse'
                    return 1
                ;;
            *)                          _CURDIR= ;;


        esac
    done <<EOF
$ls_result
EOF
    # echo "$_list" >&2
    # _clock 'listdir2'
}


_files_stats() {
    content="$1"
    shift
    first=
    for _path in "$@"; do

        dirn=
        if [ -z "$first" ]; then
            set --
            first=1
        fi
        if [ -z "$_path" ]; then
            continue
        elif [ ! -d "$_path" ]; then
            set -- "$@" "$_path"
            continue
        else
            dirn="$_path"
            finded=.
        fi

        # elif [ "${path/\//}" = "$path" ]; then
        #     # '$path' contain '/'
        #     dirn="${path%/*}"
        #     finded="${path##*/}"
        # else
        #     # '$path' NOT contain '/'
        #     dirn=
        #     finded="$path"
        # fi
        if [ -n "$dirn" ]; then
            cd "$dirn" || continue
        fi
        if [ ! -e "$finded" ]; then
            continue
        fi
        # find "$finded" \
        #   \( ! -type d -printf "%y %m %U %G %s %TY/%Tm/%Td %TH:%TM:%TS %p\\n" \) -o \
        #   \( -type d -printf "%y %m %U %G 0 %TY/%Tm/%Td %TH:%TM:%TS %p\\n" \)

        if [ "$content" != 'content-only' ]; then
            # shellcheck disable=2012 disable=2046
            # LANG=C ls -ln $(find "$finded" ! -type d) | awk '!($2="")'

            # shellcheck disable=2012 disable=2046
            while read -r x1 hardlink x3 x4 x5 x6 x7 x8 _path; do
                echo "$x1 - $x3 $x4 $x5 $x6 $x7 $x8 $_path"
            done <<EOF
$(LANG=C /bin/ls -ln $(find "$finded" ! -type d))
EOF
        fi
        if [ -n "$content" ]; then
            # shellcheck disable=2046
            md5sum $(find "$finded" -type f)
        fi
    done
    if [ $# -gt 0 ]; then
        if [ "$content" != 'content-only' ]; then
            # shellcheck disable=2012
            # LANG=C ls -ln "$@" | awk '!($2="")'
            while read -r x1 hardlink x3 x4 x5 x6 x7 x8 _path; do
                echo "$x1 - $x3 $x4 $x5 $x6 $x7 $x8 $_path"
            done <<EOF
$(LANG=C /bin/ls -ln "$@")
EOF
        fi
        hardlink=$hardlink
        unset x1 hardlink x3 x4 x5 x6 x7 x8 _path

        if [ -n "$content" ]; then
            md5sum "$@"
        fi
    fi
}


files_stats() {
    _files_stats "" "$@"
}

files_stats_contents() {
    _files_stats "content" "$@"
}

files_contents() {
    _files_stats "content-only" "$@"
}

files_stats_by_liens() {
    lines=$1
    set --
    while read -r path; do
        if [ -n "$path" ]; then
            set -- "$@" "$path"
        fi
    done <<EOF
$lines
EOF
    unset lines path
    # echo "files_stats_by_liens $#" >&2
    files_stats "$@"
}

