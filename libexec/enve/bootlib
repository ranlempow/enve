#!/usr/bin/env bash


if [ -n "${HAVE_ENVE_BOOTLIB:-}" ]; then
    return 0
fi
HAVE_ENVE_BOOTLIB=1

# shellcheck source=libexec/enve/envelib
. "$ENVE_HOME/enve/base"


# TODO: is this ok?
ENVE_BOOT_THOROUGH=true


ENVE_DEPENDCIES="curl git openssh"

# shellcheck disable=2034
PROG_curl=curl
# shellcheck disable=2034
PROG_git=git
# shellcheck disable=2034
PROG_openssh=ssh

ensure_brew() {
    if hascmd brew; then
        return 0
    elif /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"; then
        return 0
    else
        return 1
    fi
}

basetool_install_command() {
    # kernal_name="$(uname -s)"
    # case "$kernal_name" in
    fast_get_system
    case "$ENVE_CACHED_OS" in
        Darwin)
                if ensure_brew; then
                    cmd='brew install'
                else
                    error "unknown package manager at $kernal_name"
                    return 1
                fi
            ;;
        Linux)
                if hascmd apt-get; then
                    cmd='sudo apt-get install'
                elif hascmd yum; then
                    cmd='sudo yum install'
                elif hascmd pacman; then
                    cmd='sudo pacman -S'
                elif hascmd apk; then
                    # alpine
                    cmd='sudo apk add'
                else
                    error "unknown package manager at $kernal_name"
                    return 1
                fi
            ;;
        FreeBSD)
                if hascmd pkg; then
                    cmd='sudo pkg install'
                else
                    error "unknown package manager at $kernal_name"
                    return 1
                fi
            ;;
        MINGW*|MSYS*)
                # TODO: mingw has no pacman
                if hascmd pacman; then
                    cmd='pacman -S'
                else
                    error "unknown package manager at $kernal_name"
                    return 1
                fi
            ;;
        CYGWIN*)
                if [ -f "/setup-x86_64.exe" ]; then
                    cmd='/setup-x86_64.exe -q --no-verify -R "$(cygpath /)" -l "xxx" -P'
                elif [ -f "/setup-x86.exe" ]; then
                    cmd='/setup-x86_64.exe -q --no-verify -R "$(cygpath /)" -l "xxx" -P'
                else
                    error "unknown package manager at $kernal_name"
                    return 1
                fi
            ;;
        *)
                error "unsuported operating system $kernal_name"
                return 1
            ;;
    esac
    echo "$cmd"
}

is_need_toybox() {
    { ! hascmd nc; } || \
    { ps - 2>&1 | tail -n +1 | grep BusyBox; } || \
    { ! hascmd top; }
}

basic_require_ensure() {
    deps="$ENVE_DEPENDCIES"
    # kernal_name="$(uname -s)"
    # case "$kernal_name" in
    fast_get_system
    case "$ENVE_CACHED_OS" in
        # procps-ng for 'top'
        MINGW*|MSYS*|CYGWIN*) deps="$deps procps-ng cygrunsrv" ;;
    esac
    if is_need_toybox; then
        deps="$deps toybox"
    fi

    needed=
    for dep in $deps; do
        if ! eval hascmd \$PROG_$dep; then
            needed="$needed${needed:+ }$dep"
        fi
    done
    if [ -n "$needed" ]; then
        # thoroughly boot
        if [ -n "${ENVE_BOOT_THOROUGH:-}" ]; then
            if ! eval "$(basetool_install_command) $needed"; then
                error "basic required program install failed"
                return 1
            fi
        else
            error "you need install basic required program manually by: "
            error "  '$(basetool_install_command) $needed'"
            error "or run again with --thorough option."
            return 1
        fi
    fi
}

