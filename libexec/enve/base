#!/usr/bin/env bash

if [ -n "${HAVE_ENVE_BASE:-}" ]; then
    return 0
fi
HAVE_ENVE_BASE=1

ENVE_PROGRAM_NAME="${0##*/}"

hascmd() {
    command -v "$1" >/dev/null
}


if ! hascmd md5sum; then
    # BSD
    md5sum() {
        md5 -r "$@"
    }
fi
if ! hascmd tac; then
    # BSD
    tac() {
        tail -r
    }
fi


in_busybox_shell() {
    [ "$SHELL" = "/bin/ash" ] && [ "$(ps -o pid,comm | awk '$1=='"$$"'{ print $2 }' | tail -n 1)" = "busybox" ]
}

if in_busybox_shell; then
    # busybox shell
    :
fi

replace() {
    # c=0
    while [ "$s" != "${s%%$1*}" ]; do
        s="${s%%$1*}$2${s#*$1}"
        # echo x "$s" "${s%%$1*}" >&2
        # if [ "$c" -gt 100 ]; then
        #     break
        # fi
        # c=$((c+1))
    done
    # printf %s "$s"
}

hashstr() {
    # data="$(cat)"
    # echo "$data" | md5sum "$@" | while read -r sha __file; do
    # shellcheck disable=2034
    # md5sum "$@" | while read -r hashvalue __file; do

    result=$(md5sum "$@")
    hashvalue=
    while read -r _hashvalue __file; do
        hashvalue=${_hashvalue}
        echo "$hashvalue"

    done <<EOF
$result
EOF
    __file=${__file}
    unset _hashvalue __file
}


fast_readtext() {
    text=
    while IFS='' read -r line; do
        text="$text${text:+$newl}$line"
    done < "$1"
    unset line
}

fast_dirname() {
    d=${d%%/}
    if [ -z "$d" ]; then
        d=\.
    elif [ -z "${d%/*}" ]; then
        d=/
    elif [ "$d" = "${d%/*}" ]; then
        d=\.
    else
        d=${d%/*}
    fi
}

combine_umask() {
    mask=
    eval "mask=$((0$(umask) & 0$1))"
    printf %o\\n "$mask"
}

create_file_mutex() {
    (
        umask "$(combine_umask "${2:-7077}")"
        set -o noclobber
        { true > "$1" ; } >/dev/null 2>&1
    )
}

create_dir_mutex() {
    (
        umask "$(combine_umask "${2:-7077}")"
        mkdir "$1" >/dev/null 2>&1
    )
}

_sixrand50() {
    # shellcheck disable=1004
    awk 'BEGIN {  srand(); for (i = 1; i <= 50; i++)
                        printf("%c%c%c%c%c%c\n", rand() * 26 + 97, rand() * 26 + 97 \
                                               , rand() * 26 + 97, rand() * 26 + 97 \
                                               , rand() * 26 + 97, rand() * 26 + 97) }'
}

_mkstemp() {
    mutex_function=$1
    shift

    rands="$(_sixrand50)"
    prefix="${1%XXXXXX}"
    if [ "$prefix" = "$1" ]; then
        return 1
    fi
    shift

    for rand in $rands; do
        if $mutex_function "$prefix$rand" "$@"; then
            echo "$prefix$rand"
            return 0
        fi
    done
    return 1
}

mkstemp() {
    _mkstemp create_file_mutex "$@"
}
mkdtemp() {
    _mkstemp create_dir_mutex "$@"
}



# enve is a stateless program, that is unnecessary to use '/var'

get_cachedir() {
    if [ -n "${ENVE_CACHE_DIR:-}" ]; then
        echo "$ENVE_CACHE_DIR"
        return 0
    fi
    kernal_name="$(uname -s)"
    case "$kernal_name" in
        Linux|FreeBSD|Darwin)
                # macos $HOME do not have issus as in windows
                # $HOME always contain only alphanum without space and all lowercase.
                
                # echo ~/Library/Caches/enve

                # shellcheck disable=2034
                read -r fileperm x2 fileuser x4 x5 x6 x7 x8 path <<EOF
$(ls -ld /var/cache/enve 2>/dev/null)
EOF
                if [ "$fileperm" = "drwxrwxrwt" ] && [ "$fileuser" = "root" ]; then
                    echo /var/cache/enve
                else
                    echo ~/.cache/enve
                fi
                
            ;;
        # Linux|FreeBSD)
        #         if [ "$(id -u)" -eq 0 ]; then
        #             echo /var/cache/enve
        #         else
        #             echo ~/.cache/enve
        #         fi
        #     ;;
        MINGW32*|MSYS*|CYGWIN*)
                # $LOCALAPPDATA is the temporary files of Applications.
                # but $HOME may contain non-acsii character or space.
                # so, we use $ProgramData
                # The file system directory that contains application data for all users.

                # shellcheck disable=2154
                cygpath -u "$ProgramData/enve"
            ;;
        *)
                echo /var/cache/enve
            ;;
    esac
}

get_tempdir() {
    if [ -n "${TMP:-}" ]; then
        echo "${TMP%%/}"
    elif [ -n "${TMPDIR:-}" ]; then
        echo "${TMPDIR%%/}"
    elif [ -n "${TEMP:-}" ]; then
        echo "${TEMP%%/}"
    elif [ -n "${TEMPDIR:-}" ]; then
        echo "${TEMPDIR%%/}"
    else
        echo "/tmp"
    fi
}

quote () { printf %s\\n "$1" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/'/" ; }

save () {
    for i do quote "$i"; done
    echo " "
}



# syslog: emerg, alert, crit, err, warning, notice, info, debug
# python: CRITICAL ERROR WARNING INFO DEBUG


_loglevel_form_symbol() {
    case ${ENVE_VERBOSE:-TRACE} in
        CRIT|CRITICAL)  loglevel=6 ;;
        ERROR)          loglevel=5 ;;
        WARN|WARNING)   loglevel=4 ;;
        NOTICE)         loglevel=3 ;;
        INFO)           loglevel=2 ;;
        DEBUG)          loglevel=1 ;;
        TRACE)          loglevel=0 ;;

        *)              loglevel=3 ;;
    esac
    if [ "${1:-nonfast}" = "nonfast" ]; then
        echo "$loglevel"
    fi
}

timestamp() {
    # date +%s%N | cut -b5-13
    tm=$(date +%s%N)
    # tm=$(/nix/store/p0zfmny1vsb4ryzn67p4rbm0nqk78yya-boot-env/bin/date +%s%N)
    tm=${tm#?????}
    tm=${tm%${tm#????????}}
    echo "$tm"
    unset tm
}

timestamp2() {
    tm=$(date +%s%N)
    # tm=$(/nix/store/p0zfmny1vsb4ryzn67p4rbm0nqk78yya-boot-env/bin/date +%s%N)
    tm=${tm#?????}
    tm=${tm%${tm#????????}}
    echo "$tm"
    unset tm
}


_format_head() {
    fmts=
    if [ -t 2 ] && [ -z "${ENVE_NOCOLOR:-}" ]; then
        C0='\033[0m'
        C1='\033[36m'
        C2='\033[35m'
        Cr='\033[31m'
        case $1 in
            critical|error) C2="$Cr" ;;
        esac

        case ${ENVE_VERBOSE:-TRACE} in
            CRIT|CRITICAL)  fmts="$C1%4s$C0 $C2%8s$C0" ;;
            ERROR)          fmts="$C1%4s$C0 $C2%8s$C0" ;;
            WARN|WARNING)   fmts="$C1%4s$C0 $C2%8s$C0" ;;
            NOTICE)         fmts="$C1%4s$C0 $C2%8s$C0" ;;
            INFO)           fmts="$C1%4s$C0 $C2%8s$C0" ;;
            DEBUG)          eval "fmts=\"[$(date -u +"%D %T")] $C1%4s$C0 $C2%8s$C0\"" ;;
            TRACE)          eval "fmts=\"[$(timestamp)] $C1%4s$C0 $C2%8s$C0\"" ;;
        esac
    else
        case ${ENVE_VERBOSE:-NOTICE} in
            CRIT|CRITICAL)  fmts="%4s %s:" ;;
            ERROR)          fmts="%4s %s:" ;;
            WARN|WARNING)   fmts="%4s %s:" ;;
            NOTICE)         fmts="%4s %s:" ;;
            INFO)           fmts="%4s %8s:" ;;
            DEBUG)          eval fmts=\""[$(date -u +"%D %T")] %4s %8s:"\" ;;
            TRACE)          eval fmts=\""[$(timestamp)] %4s %8s:"\" ;;
        esac
    fi
    # shellcheck disable=2059
    printf "$fmts" "$ENVE_PROGRAM_NAME" "$1"
}

critical() {
    _loglevel_form_symbol fast
    if [ "$loglevel" -le 6 ]; then
        _format_head "${LOGTYPE:-critical}" >&2
        echo " $*" >&2
        # echo "$(_format_head ${LOGTYPE:-critical}) $*" >&2
    fi
}
error() {
    _loglevel_form_symbol fast
    if [ "$loglevel" -le 5 ]; then
        _format_head "${LOGTYPE:-error}" >&2
        echo " $*" >&2
        # echo "$(_format_head ${LOGTYPE:-error}) $*" >&2
    fi
}

warning() {
    _loglevel_form_symbol fast
    if [ "$loglevel" -le 4 ]; then
        _format_head "${LOGTYPE:-warning}" >&2
        echo " $*" >&2
        # echo "$(_format_head ${LOGTYPE:-warning}) $*" >&2
    fi
}

notice() {
    _loglevel_form_symbol fast
    if [ "$loglevel" -le 3 ]; then
        _format_head "${LOGTYPE:-notice}" >&2
        echo " $*" >&2
        # echo "$(_format_head ${LOGTYPE:-notice}) $*" >&2
    fi
}

# log() {
#     if [ "$(_loglevel_form_symbol)" -le 3 ]; then
#         echo "$(_format_head warning) $*" >&2
#     fi
# }

info() {
    _loglevel_form_symbol fast
    if [ "$loglevel" -le 2 ]; then
        _format_head "${LOGTYPE:-info}" >&2
        echo " $*" >&2
        # echo "$(_format_head ${LOGTYPE:-info}) $*" >&2
    fi
}

debug() {
    _loglevel_form_symbol fast
    if [ "$loglevel" -le 1 ]; then
        _format_head "${LOGTYPE:-debug}" >&2
        echo " $*" >&2
        # echo "$(_format_head ${LOGTYPE:-debug}) $*" >&2
    fi
}

trace() {
    _loglevel_form_symbol fast
    if [ "$loglevel" -le 0 ]; then
        _format_head "${LOGTYPE:-trace}" >&2
        echo " $*" >&2
        # echo "$(_format_head ${LOGTYPE:-trace}) $*" >&2
    fi
}

_critical() { critical "$@"; }
_error() { error "$@"; }
_warning() { warning "$@"; }
_notice() { notice "$@"; }
_info() { info "$@"; }
_debug() { debug "$@"; }
_trace() { trace "$@"; }

die() {
    trap - EXIT
    if [ -n "${1:-}" ]; then
        _error "$1"
    fi
    exit "${2:-1}"
}


settrace() {
    # trap '[ $? -eq 0 ] || echo err in $FUNCNAME in $BASH_SOURCE >&2' EXIT

    trap '
    retcode=$?
    if [ "$retcode" -ne 0 ]; then
        if [ -n "${FUNCNAME:-}" ]; then
            _trace "Traceback:"
            i=0
            while [ -n "${FUNCNAME[$i]:-}" ]; do
                _trace "  File $(basename "${BASH_SOURCE[$i]}"), in ${FUNCNAME[$i]}"
                i=$(( i + 1 ))
            done
        fi
        _error "Unexpected exit code $retcode"
    fi
    '"$(eval echo \$\*)" EXIT
    retcode=
    set -eu
    if hascmd shopt; then
        # for posix-sh compative in bash, need bash>=4.4
        # shellcheck disable=2039
        shopt -s inherit_errexit >/dev/null 2>&1 || true
    fi
}




