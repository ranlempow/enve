#!/bin/sh

if [ -n "${HAVE_ENVE_CACHELIB:-}" ]; then
    return 0
fi
HAVE_ENVE_CACHELIB=1

# shellcheck source=libexec/enve/baselib
. "$ENVE_HOME/enve/baselib"


path_rebuild() {
    f_path=${1:-}
    f_make=${2:-}
    f_vaild=${3:-}

    do_wait=1
    while [ "${do_wait:-0}" -lt 6 ]; do
        if [ ! -e "$f_path" ]; then
            do_make=1
        elif [ -n "$f_vaild" ]; then
            retcode=0
            vaild=$(
                settrace
                # shellcheck disable=2097 disable=2098
                CACHED=$f_path f_path='' f_make='' f_vaild='' eval "$f_vaild"
            ) || retcode=$?
            if [ "$retcode" -ne 0 ]; then
                _error "execute f_vaild failed"
                return 1
            elif [ "$vaild" = "1" ]; then
                do_make=
            else
                do_make=1
            fi
        else
            # cache exist, don't do anything
            do_make=
        fi

        if [ -n "$do_make" ]; then
            if [ -n "$f_make" ]; then
                if obtain_filelock "${f_path}.lock" "36000000"; then
                    rm -rf "$f_path"
                    mkdir -p "$f_path"
                    retcode=0
                    (
                        settrace
                        # shellcheck disable=2097 disable=2098
                        CACHED=$f_path f_path='' f_make='' f_vaild='' eval "$f_make"
                    ) || retcode=$?

                    if [ "$retcode" -eq 0 ]; then
                        output_none=
                        if [ -d "$f_path" ]; then
                            set -- "$f_path"/.* "$f_path"/*
                            if [ -z "${3:-}" ]; then
                                output_none=1
                            fi
                        elif [ ! -e "$f_path" ]; then
                            output_none=1
                        fi
                        if [ -n "$output_none" ]; then
                            result=failed
                            _error "f_make output nothing, '$f_path' is empty, maybe build failed"
                        else
                            result=success
                        fi
                    else
                        result=failed
                        _error "execute f_make failed"
                    fi
                else
                    do_wait=$((do_wait + 1))
                    sleep 5
                    continue
                fi
            else
                result=notfound
                _debug "cache entry ${f_path} not found"
                # return 1
            fi
        else
            result=exists
        fi

        case $result in
            failed)
                    release_filelock "${f_path}.lock" && rm -rf $f_path || true
                    return 1
                ;;
            success)
                    release_filelock "${f_path}.lock" || true
                    return 0
                ;;
            notfound)      return 30;;
            exists)        return  0;;
            *)
                    _fatal "unknown result: '$result'"
                    return 1
                ;;
        esac
    done

    _error "wait too long"
    return 1
}



cache_rebuild() {
    # TODO: check {targetuser, catalog, title} must
    #       contain only ascii code and vaild character.
    targetuser=${cacheuser:-$USER}

    f_text=$1
    f_make=${2:-}
    f_vaild=${3:-}

    as_cache() {
        hashtext=$(
            settrace
            eval "$f_text"
        ) || {
            _error "execute f_text failed"
            return 1
        }
        # retcode=$?
        # set -e
        # if [ "$retcode" -ne 0 ]; then
        #     _error "execute f_text failed"
        #     return 1
        # fi

        hashstr >/dev/null <<EOF
$hashtext
EOF
        hashid=$hashvalue

        if [ -n "${ENVE_CACHE_DIR:-}" ]; then
            cachedir=$ENVE_CACHE_DIR
        else
            cachedir=$(get_cachedir)
        fi
        [ -e "$cachedir" ] || mkdir -p "$cachedir"
        # root user always use root/ or root-private/
        # shared cached has rwx--x--x
        # private cached has rwx------
        founds=$(ls -ld \
            "$cachedir/"*-"${catalog:-any}/$hashid-${title:-none}" \
            "$cachedir/"*-"${catalog:-any}-1/$hashid-${title:-none}" \
            "$cachedir/"*-"${catalog:-any}-2/$hashid-${title:-none}" \
            "$cachedir/"*-"${catalog:-any}-3/$hashid-${title:-none}" \
            "$cachedir/"*-"${catalog:-any}-4/$hashid-${title:-none}" \
            "$cachedir/"*-"${catalog:-any}-private/$hashid-${title:-none}" \
            "$cachedir/"*-"${catalog:-any}-private-1/$hashid-${title:-none}" \
            "$cachedir/"*-"${catalog:-any}-private-2/$hashid-${title:-none}" \
            "$cachedir/"*-"${catalog:-any}-private-3/$hashid-${title:-none}" \
            "$cachedir/"*-"${catalog:-any}-private-4/$hashid-${title:-none}" \
            2>/dev/null || echo "")

        if [ "$targetuser" = "root" ]; then
            to_founds=$founds
            founds=
            while read -r x1 x2 fileuser x4 x5 x6 x7 x8 path; do
                if [ "$fileuser" = "root" ]; then
                    founds="${founds}${founds:+$newl}$x1 $x2 $fileuser $x4 $x5 $x6 $x7 $x8 $path"
                fi
            done <<EOF
$to_founds
EOF
        fi

        _make_subfolder() {
            if [ -n "${cache_private:-}" ]; then
                ( umask 077; mkdir "$folder" )
            else
                ( umask 066; mkdir "$folder" )
            fi
        }

        empty_slot=
        for i in "" 1 2 3 4; do
            folder="$cachedir/$targetuser-${catalog:-any}${cache_private:+-private}${i:+-}$i"
            if [ -e "$folder" ]; then
                if [ -d "$folder" ] && [ -r "$folder" ] && [ -w "$folder" ] && [ -x "$folder" ]; then
                    empty_slot=$folder
                    break
                fi
            elif _make_subfolder; then
                empty_slot=$folder
                break
            fi
        done

        if [ -z "$empty_slot" ]; then
            _error "unable create cache folder at $(pwd) by $USER"
            return 1
        fi

        CACHED="$empty_slot/$hashid-${title:-none}"
    }
    as_tmp() {
        # dest=$(mkdtemp "$(get_tempdir)/enve-$title.XXXXXX")
        CACHED="$(mkdtemp "$(get_tempdir)/enve-$title.XXXXXX")/${title:-none}"
    }

    if [ "${dest:-%cache}" = "%cache" ]; then
        as_cache
    elif [ "${dest:-%cache}" = "%tmp" ]; then
        as_tmp
    elif [ "${dest:-%cache}" = "%auto" ] && [ "${pure:-0}" -eq 0 ]; then
        as_tmp
    elif [ "${dest:-%cache}" = "%auto" ] && [ "${pure:-0}" -eq 1 ]; then
        as_cache
    else
        d="$dest"
        fast_dirname
        if [ ! -e "$d" ]; then
            mkdir -p "$d" || {
                _error "unable create destination folder at $d"
                return 1
            }
        elif [ ! -d "$d" ]; then
            _error "destination folder is not a dir"
            return 1
        fi
        unset d
        CACHED=$dest
    fi
    path_rebuild "$CACHED" "$f_make" "$f_vaild"
}


cache_cat() {
    cat_target=$1
    shift
    cache_rebuild "$@"
    cat "$CACHED/$cat_target"
    unset CACHED cat_target
}
cache_cattext() {
    cat_target=$1
    shift
    cache_rebuild "$@"
    fast_readtext "$CACHED/$cat_target"
    unset CACHED cat_target
}
cache_path() {
    _path=$1
    shift
    cache_rebuild "$@"
    cached_path="$CACHED${_path:+/}$_path"
    # echo "$CACHED${path:+/}$path"
    unset CACHED _path
}


# makepkg() {
#     # TODO: add enve dependency: fakeroot
#     # fakeroot cannot used with macos /bin/* /usr/bin/*
#     TZ=UTC0 touch -t 197001010000.01 --no-dereference ./*
#     # fakeroot -- \
#     #     env LANG=C \
#     #     tar -cf .MTREE --format=mtree \
#     #     --options='!all,use-set,type,uid,gid,mode,time,size,md5,link' *
#     # package="x$pkgname-$pkgver-$pkgrel-$arch.tar.xz"
#     package="x$1-$2-$3-$4.tar.xz"
#     # fakeroot -- \
#     #     env LANG=C tar -cf - * | \
#     #     xz -c -z - > "$package"
#     fakeroot -- \
#         env LANG=C tar jcf "$package" *
#     mv "$package" "../"
# }

build_package() {
    # TODO: add enve dependency: fakeroot
    # fakeroot cannot used with macos /bin/* /usr/bin/*

    TZ=UTC0 touch -t 197001010000.01 --no-dereference "$dir"/*
    p_text() {
        files_contents "$dir"
    }
    p_make() {
        rmdir "$CACHED"
        cd "$dir"
        fakeroot -- \
            env LANG=C tar jcf "$CACHED" *
    }
    d="$dir"
    fast_dirname
    title="$d.tar.bz2"
    unset d
    title="$title" cache_rebuild p_text p_make
}


cache_add() {
    # add file or directory
    # return cached path
    (
        t=$1
        p_text() { files_stats_contents "$t"; }
        p_make() {
            rmdir "$CACHED"
            if [ -d "$t" ]; then
                cp -R "$t"/* "$CACHED"
            else
                cp "$t" "$CACHED"
            fi
        }
        cache_rebuild p_text p_make
        echo "$CACHED"
    )
}

# cache_install() {
#     # add files from extracted tar file
#     # return cached path
#     (
#         tarfile=$1
#         p_text() { cat "$tarfile"; }
#         p_make() { extttttttttt "$tarfile"; }
#         cache_rebuild p_text p_make
#         echo "$CACHED"
#     )
# }


# listpkg() {
#     tar -tvf "$1"
# }
# inspkg() {
#     package="$1"
#     dest="$2"
#     tar jxf "$package" "$2"
# }
# makepkg



