#!/bin/sh

# shellcheck disable=2016
true

if [ -n "${HAVE_ENVE_ENVELIB:-}" ]; then
    return 0
fi
HAVE_ENVE_ENVELIB=1


# shellcheck source=libexec/enve/baselib
. "$ENVE_HOME/enve/baselib"
# shellcheck source=libexec/enve/urlutils
. "$ENVE_HOME/enve/tablelib"
# shellcheck source=libexec/enve/findutils
. "$ENVE_HOME/enve/findutils"
# shellcheck source=libexec/enve/pathutils
. "$ENVE_HOME/enve/pathutils"
# shellcheck source=libexec/enve/cachelib
. "$ENVE_HOME/enve/cachelib"
# shellcheck source=libexec/enve/urlutils
. "$ENVE_HOME/enve/urlutils"




rcfile_parse_meta_table() {
    #
    # input
    #   $1 - rcfile path
    #
    # output
    #   META_TABLE
    META_TABLE=
    while read -r line; do
        case $line in
            \#"META: VAR$tab"*)
                    cuts=${line#\#"META: VAR$tab"}
                    META_TABLE="${META_TABLE}VAR$tab$cuts$newl"
                ;;
        esac
    done < "$1"
    unset line cuts key value s
}


fast_system_roles() {
    out=
    fast_get_system
    case "$ENVE_CACHED_OS" in
        FreeBSD) out="$out${out:+,}freebsd,bsd,unix,posix"; ;;
        Darwin) out="$out${out:+,}darwin,bsd,unix,posix"; ;;
        Linux) out="$out${out:+,}linux,unix,posix"; ;;
        MINGW32) out="$out${out:+,}nt,msystem,mingw,mingw32"; ;;
        MINGW64) out="$out${out:+,}nt,msystem,mingw,mingw64"; ;;
        MSYS*) out="$out${out:+,}nt,msystem,msys2"; ;;
        CYGWIN) out="$out${out:+,}nt,cygwin,posix"; ;;
    esac
    out_system_roles=$out
    unset out
}


parse_config_non_recursive() {
    #
    # input
    #   $1 - path
    #   roles
    #   parse_inherit
    #   parse_profile_optional
    #
    # output
    #   OUT_TABLE
    #
    # inout
    #   loaded
    #

    config_path=$1
    if [ -z "$config_path" ]; then
        _error "config_path is null"
        return 1
    elif [ "${config_path#/}" = "$config_path" ]; then
        normalize "$PWD/$config_path"
        config_path="$ret"
    fi

    loaded=${loaded:-$newl}
    if [ "${loaded#$newl$config_path$newl}" != "$loaded" ]; then
        unset config_path
        return 0
    elif [ ! -f "$config_path" ]; then
        if [ -z "${parse_profile_optional:-}" ]; then
            _error "no such config file $config_path"
            unset config_path
            return 1
        else
            unset config_path
            return 0
        fi
    fi
    loaded="$loaded$config_path$newl"

    if [ -n "${parse_inherit:-}" ]; then
        # TODO: layout.root 與 enve.configs 的關係是什麼?
        d="$1"
        fast_dirname
        root_path=$(canonicalize_symlinks "$d")
        printf VAR\\t%s\\t%s\\n layout.root "$root_path"
        unset d root_path
    fi

    if ! parse_config_non_recursive_text < "$config_path"; then
        _error "parse error at $config_path"
        unset text config_path
        return 1
    fi
    printf %s "\
VAR${tab}enve.bound${tab}$config_path
VAR${tab}enve.configs${tab}$config_path
VAR${tab}enve.roles${tab}$roles
"
    unset text config_path
}


enve_parse_config() {
    #
    # input
    #   [parse_inherit]
    #   [parse_profile_optional]
    #   [roles]
    #   [stage1_is_text]
    #   $1 - STAGE1_FILE or STAGE1_TEXT
    #
    # inout
    #   TABLE
    #   [loaded]
    #

    if [ -n "${stage1_is_text:-}" ]; then
        STAGE1_TABLE=$(printf %s\\n "$1" | roles=$roles parse_config_non_recursive_text) || return 1
    else
        STAGE1_TABLE=$(
            roles="$roles" \
            parse_inherit="${parse_inherit:-}" \
            parse_profile_optional="${parse_profile_optional:-}" \
            parse_config_non_recursive "$1") || return 1
    fi

    if [ -z "$STAGE1_TABLE" ] || {
            [ -n "${STAGE1_TABLE%%*"${tab}__include${tab}"*}" ] &&
            [ -n "${STAGE1_TABLE%%*"${tab}__inherit${tab}"*}" ]; }; then
        TABLE="${TABLE:+$TABLE$newl}$STAGE1_TABLE"
        return 0
    fi

    parse_inherit=
    while IFS="$tab" read -r vtype key value; do
        unset STAGE1_TABLE
        if [ "$key" = "__include" ] || [ "$key" = "__inherit" ]; then
            if [ "$key" = "__inherit" ]; then
                if [ -z "$parse_inherit" ]; then
                    parse_inherit=1
                else
                    error "cannot inherit multiple enve profile"
                    return 1
                fi
            fi
            if [ -z "${value%%*,*}" ]; then
                _path=${value%%,*}
                _roles=${value#*,}
            else
                _path=$value
                _roles=
            fi
            if [ "${_path%${_path#?}}" = "+" ]; then
                _path=${_path#?}
                parse_profile_optional=1
            else
                parse_profile_optional=
            fi
            if ! stage1_is_text="" \
                 parse_inherit=$parse_inherit \
                 parse_profile_optional=$parse_profile_optional \
                 roles=${_roles} enve_parse_config "$_path"; then
                return 1
            fi
        elif [ -n "$key" ]; then
            TABLE="${TABLE:+$TABLE$newl}$vtype${tab}$key${tab}$value"
        fi
    done <<EOF
$STAGE1_TABLE
EOF
    unset parse_inherit parse_profile_optional
}




execute_envdef() {
    TABLE="$1"
    target=$2
    shift 2

    if ! TABLE=$(settrace
                 table_substi "$TABLE"); then
        return 1
    fi

    eval_line() {
        LOGLEVEL=DEBUG log "EVAL: $1"
        printf %s\\n "$1"
    }

#     # PATH promote
#     # TODO: need resolve at software design!
#     _PATH=
#     while IFS="$tab" read -r vtype name value; do
#         case $vtype/$name in
#             LIST/PATH)
#                     _PATH="${_PATH:+${_PATH}:}$value"
#                 ;;
#         esac
#     done  <<EOF
# $TABLE
# EOF
#     eval_line "PATH='$_PATH'; export PATH"

    eval_line "unset ENV"
    _hooks=" "
    while IFS="$tab" read -r vtype name value; do
        case $vtype in
            LIST)
                s=$value
                replace "$feed" "$newl"
                r_value=$s
                if [ -n "$r_value" ]; then
                    eval "_LIST_$name=\"\${_LIST_$name:+\${_LIST_$name}\$feed}\$r_value\""
                else
                    eval "_LIST_$name="
                fi
                ;;
            HOOK)
                if [ -n "$value" ]; then
                    eval "_HOOK_${name}=\"\${_HOOK_${name}:-}\$value\$newl\""
                else
                    eval "_HOOK_${name}="
                fi
                if [ -n "${_hooks##*" "$name" "*}" ]; then
                    _hooks="${_hooks}$name "
                fi
                ;;
            META)
                    eval_line "#META: VAR${tab}$name${tab}$value"
                ;;
        esac
    done  <<EOF
$TABLE
EOF

    for name in ${_hooks}; do
        eval_line "${name}_hook() {"
        eval eval_line "\$_HOOK_${name}"
        eval_line "}"
    done

    while IFS="$tab" read -r vtype name value; do
        case $vtype in
            VAR)
                    if [ "${name#*.}" != "$name" ] || [ "${name}" = bound ]; then
                        continue
                    fi
                    s=$value
                    replace "$feed" "$newl"
                    r_value=$s
                    if [ -n "$r_value" ]; then
                        eval_line "$name='$r_value'; export $name"
                    else
                        eval_line "unset $name"
                    fi
                ;;
            JOIN)
                    eval "s=\"\$_LIST_$name\""
                    replace "$feed" "$value"
                    eval_line "$name='$s'; export $name"
                    # eval "_JOIN_$name='$value'; _LIST_$name=\"\${_LIST_$name:-}\""
                    # _lists="${_lists}${_lists:+ }$name"
                ;;
            ALIAS)
                    eval_line "alias $name='$value'"
                ;;
            SRC)
                    eval_line ". '$value'"
                ;;
            CODE)
                    eval_line "$value"
                ;;
            SEC)
                    s=$value
                    replace "$feed" "$newl"
                    r_value=$s
                    eval_line "$name=\$($r_value); export $name"
                ;;
            CAT)
                    fast_readtext "$value"
                    eval_line "$text"
                ;;
            # EXEC)
            #         set -- "$@" "$r_value"
            #     ;;
            # META)
            #         eval_line "#META: VAR${tab}$name${tab}$r_value"
            #     ;;
            # HOOK)
            #         eval "${name}hook=\"\${${name}hook}\$value\$newl\""
            #     ;;
        esac
    done <<EOF
$TABLE
EOF
    cat $ENVE_HOME/enve/shielding.sh
    # eval_line 'if [ -n "${RC_CMD:-}" ]; then'
    # eval_line '  eval $RC_CMD'
    # eval_line '  exit $?'
    # eval_line 'fi'
    unset eval_line
}








# _clock() {
#     echo "[$(($(date +%s%N) / 1000000))] $1" >&2
# }

get_module_info() {
    : '
    define.module                       模組定義
    define.module.$i.$p.name            default is "$dirname"/*.enve.ini
    define.module.$i.$p.procedure       must set
    define.module.$i.$p.native_exec     default is false, no create enve
    define.module.$i.$p.source_exec     default is false, not use fork, use "." instand
    define.module.$i.$p.exec            default is %root/$procedure.enve.module
    define.module.$i.$p.after           this may help ordering modules
    define.module.$i.$p.before
    '

    : '
    pasre `enve.ini` in module base folder to get module information.

    @param module_root: base path of module
    @print: [name,procedure,after,before,exec,options,enve,path, ...]
    '

    module_root=$1
    TABLE=
    if ! parse_inherit=1 \
         parse_profile_optional="" \
         roles="module-info" loaded="" enve_parse_config "$module_root/enve.ini"; then
        return 1
    fi


    # LOGLEVEL=DEBUG logtable "$TABLE"
    fast_table_tail "layout\\.root"
    _path=$TABLE_TAIL
    unset TABLE_TAIL
    # echo "LAYOUTROOT: $_path" >&2
    if [ -z "$_path" ]; then
        _error "layout.root not defined"
        return 1
    fi

    module_names=" "
    # shellcheck disable=2034
    while IFS=".${tab}" read -r vt d m name proce kv; do
        if [ "$d.$m" != "define.module" ]; then
            continue
        fi
        # TODO: no kv
        attrib=${kv%%$tab*}
        value=${kv#*$tab}
        s=$name
        replace "-" "_"
        mdict=MODULE_${s}_${proce}
        case $proce/$attrib in
            ''/*)   continue;;
            */true) ;;
            */after|*/before)
                    if [ -n "$value" ]; then
                        s=$value
                        replace "," ":"
                        eval "${mdict}_${attrib}=\"\${$mdict:-}\${s}:\""
                    else
                        eval "${mdict}_${attrib}="
                    fi
                ;;
            */?*)
                    eval "${mdict}_${attrib}=\$value"
                ;;
        esac
        if [ -n "${module_names##*" $name/$proce "*}" ]; then
            module_names="$module_names$name/$proce "
        fi
    done <<EOF
$TABLE
EOF
    unset vt d m name proce kv


    for name_proce in $module_names; do
        name=${name_proce%%/*}
        proce=${name_proce##*/}

        s=$name
        replace "-" "_"
        mdict="MODULE_${s}_${proce}"

        _options=
        if eval "[ \"\${${mdict}_native_exec:-false}\" = \"true\" ]"; then
            _options="${_options}native_exec=1;"
        fi
        if eval "[ \"\${${mdict}_source_exec:-false}\" = \"true\" ]"; then
            _options="${_options}source_exec=1;"
        fi
        eval "exec=\${${mdict}_exec:-./\$name.\$proce}"
        eval "enve=\${${mdict}_enve:-./enve.ini}"
        eval "after=\${${mdict}_after:-}"
        eval "before=:\${${mdict}_before:-}"

        after=":${after}"
        before=":${before}"
        if [ -n "${exec##./*}" ]; then
            exec=$(canonicalize_symlinks "$exec")
        else
            exec="$_path/${exec#./}"
        fi
        if [ -n "${enve##./*}" ]; then
            enve=$(canonicalize_symlinks "$enve")
        else
            enve="$_path/${enve#./}"
        fi

        printf '%s,%s,%s,%s,%s,%s,%s,%s\n' \
            "$name" "$proce" "$after" "$before" "$exec" "$_options" "$enve" "$_path"
    done
    unset TABLE TABLE_SUBSET s mdict module_names key value attrib \
          name proce after before exec _options enve _path
}


module_sort() {
    # arguments:
    #   p_modules
    #   name
    #   procefure
    #   afters
    #   befores

    # shellcheck disable=2034
    IFS="," read -r a_name a_procedure a_afters a_befores a_remain<<EOF
$1
EOF

    write_to=$2
    min=
    max=
    e_index=0
    # shellcheck disable=2034
    while IFS="," read -r b_name b_procedure b_afters b_befores b_remain; do
        [ -n "$b_name" ] || continue
        if [ "$b_name/$b_procedure" = "$a_name/$a_procedure" ]; then
            # 找到重複項目
            eval "$write_to=\"\$p_modules\""
            return
        fi
        if [ "${max:-1000}" -ge "$e_index" ] &&
            { [ -z "${b_afters#*":$a_name:"*}" ] || [ -z "${a_befores#*":$b_name:"*}" ]; };then
            #  A 在 B 之前, 把max往前移, 移到B處
            max=$((e_index))
        fi
        if [ "${min:-0}" -le "$e_index" ] &&
            { [ -z "${b_befores#*":$a_name:"*}" ] || [ -z "${a_afters#*":$b_name:"*}" ]; }; then
            #  A 在 B 之後, 把min往後移, 移到B處
            min=$((e_index + 1))
        fi
        e_index=$((e_index + 1))
    done <<EOF
$p_modules
EOF
    min=${min:-0}
    max=${max:-$e_index}
    if [ "$min" -gt "$max" ]; then
        _fatal "module ordering conflict, min: $min, max: $max"
        return 2
    fi

    eval $write_to=
    e_index=0
    while IFS="," read -r modinfo; do
        if [ $e_index -eq $max ]; then
            eval "$write_to=\"\${$write_to:-}\$1\$newl\""
        fi
        [ -n "$modinfo" ] || continue
        eval "$write_to=\"\${$write_to:-}\$modinfo\$newl\""
        e_index=$((e_index + 1))
    done <<EOF
$p_modules
EOF
}

do_fire() {
    # printf "loader_path: %s\n" "$loader_path" >&2
    if [ -z "${MODULE_OPTION%%*native_exec=1;*}" ]; then
        RCFILE_PATH="$ENVE_HOME/enve/bootstrap.rcfile"
        ENVE_CONFIG_TEXT=
    else
        RCFILE_PATH=
    fi
    if [ -z "${MODULE_OPTION%%*source_exec=1;*}" ]; then
        EXEC_SUBSHELL=main
    else
        EXEC_SUBSHELL=
    fi
    # printf "MODULE_OPTION: %s\n" "$MODULE_OPTION" >&2
    # printf "RCFILE_PATH: %s\n" "$RCFILE_PATH" >&2
    # printf "ENVE_CONFIG_TEXT: %s\n" "$ENVE_CONFIG_TEXT" >&2
    unset module_loaded loader_infos isolation_modules
    p_fire="" $p_fire "$1"
}

exec_loaders_with_info() {
    # -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
    # loader 將會試圖從設定檔中解出更多外部模組
    # 第一個執行的永遠是 $ENVE_HOME/evne/enve.loader
    # 被讀進來的模組如果含有enve.loader, 則會加入loader的行列

    # params:
    #   p_init_module_info
    #   p_fire
    #   TABLE
    # output:
    #   module_loaded
    #   isolation_modules

    p_fire=${p_fire:-fire2}
    module_loaded=
    loader_infos=$p_init_module_info
    loader_execed=,

    get_next_loader() {
        loader_exec=
        # shellcheck disable=2034
        while IFS="," read -r   e_name e_procedure e_afters e_befores \
                                e_exec e_options e_enve e_path; do
            if [ "$loader_execed" = "${loader_execed%,$e_name,}" ]; then
                loader_exec=$e_exec
                loader_enve=$e_enve
                loader_options=$e_options
                loader_path=$e_path
                loader_execed="${loader_execed}$e_name,"
                break
            fi
        done <<EOF
$loader_infos
EOF
    }

    get_next_loader
    while [ -n "$loader_exec" ]; do
        if [ -x "$loader_exec" ]; then
            # if ! module_dirs="$(unset module_loaded loader_infos isolation_modules
            #                     printf %s\\n "$TABLE" | \
            #                         ENVE_CONFIG_TEXT="${loader_enve:+inherit=$loader_enve$newl}" \
            #                         ZERO="$loader_path" \
            #                         MODULE_OPTION="$loader_options" \
            #                         $p_fire loader "$loader_exec")"; then
            #     _error "loader execute failed"
            #     return 1
            # fi
            ENVE_CONFIG_TEXT="${loader_enve:+inherit=$loader_enve$newl}"
            if ! module_dirs="$(printf %s\\n "$TABLE" | \
                                MODULE_OPTION="$loader_options;" \
                                ZERO="$loader_path" \
                                do_fire "$loader_exec")"; then
                _error "loader execute failed"
                return 1
            fi

            while read -r moddir; do
                [ -n "$moddir" ] || continue
                if ! mod_infos=$(get_module_info "$moddir"); then
                    # _warning "get_module_info error on $moddir"
                    _error "get_module_info error on $moddir"
                    return 1
                    continue
                fi
                while read -r modinfo; do
                    e_procedure=${modinfo#*,}
                    e_procedure=${e_procedure%%,*}
                    if [ "$e_procedure" = "loader" ]; then
                        p_modules=$loader_infos module_sort "$modinfo" loader_infos
                    elif [ "$e_procedure" = "module" ]; then
                        p_modules=$module_loaded module_sort "$modinfo" module_loaded
                    fi
                done <<EOF
$mod_infos
EOF
            done <<EOF
$module_dirs
EOF
        fi
        get_next_loader
    done
    unset loader_infos get_next_loader
}



resolve_with_info() {
    # input:
    #   p_module_loaded
    #   p_fire
    # global:
    #   TABLE

    p_fire=${p_fire:-fire2}
    # shellcheck disable=2034
    while IFS="," read -r   e_name e_procedure e_afters e_befores \
                            e_exec e_options e_enve e_path; do
        if [ -z "$e_name" ]; then continue; fi
        unset e_afters e_befores
        LOGTYPE='module' _info "$e_name/$e_procedure: $e_exec"
        if [ -x "$e_exec" ]; then
            # module.$name.preconfig.*
            # module.$name.config.*
            # module.$name.roles
            fast_table_subset "module\\.$e_name\\.preconfig\\..*"
            fast_as_postfix "module.$e_name.preconfig."
            module_preconfig_kv=$TABLE_AS
            fast_table_subset "module\\.$e_name\\.config\\..*"
            fast_as_postfix "module.$e_name.config."
            module_config_kv=$TABLE_AS
            fast_table_tail "module\\.$e_name\\.roles"
            extra_roles=$TABLE_TAIL

            ENVE_CONFIG_TEXT=
            while read -r key value; do
                if [ -n "$key" ]; then
                    ENVE_CONFIG_TEXT="${ENVE_CONFIG_TEXT}$key=$value$newl"
                fi
            done <<EOF
$module_preconfig_kv
EOF
            ENVE_CONFIG_TEXT="${ENVE_CONFIG_TEXT}inherit=$e_enve$newl"
            while read -r key value; do
                if [ -n "$key" ]; then
                    ENVE_CONFIG_TEXT="${ENVE_CONFIG_TEXT}$key=$value$newl"
                fi
            done <<EOF
$module_config_kv
EOF
            # SC2097: This assignment is only seen by the forked process.
            # SC2098: This expansion will not see the mentioned assignment.
            # shellcheck disable=2097,2098
            # if ! TABLE="$(  unset p_module_loaded
            #                 printf %s\\n "$TABLE" | ENVE_ROLES="$extra_roles" \
            #                                 ENVE_CONFIG_TEXT=$ENVE_CONFIG_TEXT \
            #                                 p_fire="" \
            #                                 ZERO="$e_path" \
            #                                 MODULE_OPTION="$e_options" \
            #                                 MODULE_NAME="$e_name" \
            #                                 $p_fire module "$e_exec")"; then
            #     _error "module execute error at $e_name"
            #     return 1
            # fi
            if ! TABLE="$(  unset p_module_loaded
                            printf %s\\n "$TABLE" | ENVE_ROLES="$extra_roles" \
                                            ZERO="$e_path" \
                                            MODULE_OPTION="$e_options;" \
                                            do_fire "$e_exec")"; then
                _error "module execute error at $e_name"
                return 1
            fi


            # TODO: 使用module/enve.ini 中的版本的資訊作為快取的依據
            # TODO: move to every module code
#             fileonly=1 recursive=1 listdir "$e_path"
#             while read -r modulebound; do
#                 if [ -n "$modulebound" ]; then
#                     out_var_just enve.bound "$modulebound"
#                 fi
#             done <<EOF
# ${_list}
# EOF
        fi
        out_var_just module.loaded "$e_name"
    done <<EOF
$p_module_loaded
EOF
unset   e_name e_procedure e_afters e_befores \
        e_exec e_options e_enve e_path _list
}

fire_eval() {
    : '
    enve.dependent-exec
    setup?
    bulid
    peer-build

    fire_chain 改用 eval 機制，可以fire一個env行程來取得stdout的內容
    這中間可以通過注入的方法來更動內層次的設定依賴
    eval.$variable_name.cmd = build something
    eval.$variable_name.roles = @target@role
    eval.$variable_name.enve = */enve.ini
    eval.$variable_name.config.$key = $value
    eval.$variable_name.bound = boundfile
    這個方法類似import機制
    '

    fast_table_subset eval

    value_names=" "
    # shellcheck disable=2034
    while IFS=".${tab}" read -r vt e v_name k v; do
        [ "$v" = "eval" ] || continue
        mdict=EVAL_${v_name}
        case $k in
            '')     continue;;
            cmd)   eval "${mdict}_cmd=\$v" ;;
            enve)
                    eval "${mdict}_ENVE_CONFIG_TEXT=\"inherit=\$v\$newl\""
                ;;
            roles)  eval "${mdict}_roles=\${${mdict}_roles:-},$v" ;;
            bound)  eval "${mdict}_bound=\${${mdict}_bound:-}\$v\${newl}" ;;
            config)
                    c_key=${v%%"$tab"*}
                    c_value=${v#*"$tab"}
                    eval "${mdict}_ENVE_CONFIG_TEXT=\"\${${mdict}_ENVE_CONFIG_TEXT:-}\
\$c_key=\$c_value\$newl\""
                ;;
        esac
        if [ -n "${value_names##*" $v_name "*}" ]; then
            value_names="$value_names$v_name "
        fi
    done <<EOF
$TABLE_SUBSET
EOF
    unset vt e v_name k v c_key c_value

    for v_name in $value_names; do
        mdict=EVAL_${v_name}
        eval "cmd=\${${mdict}_cmd:-}"
        eval "bound=\${${mdict}_bound:-}"
        eval "ENVE_ROLES=\${${mdict}_roles:-}"
        eval "ENVE_CONFIG_TEXT=\${${mdict}_ENVE_CONFIG_TEXT:-}"
        (eval do_fire $cmd; ) || {
            error "eval $v_name failed"
            return 1
        };
    done
}

get_rcfile_from_profiles_nocache() {
    # input:
    #   ENVE_PROFILE
    #   ENVE_ROLES
    #   ENVE_CONFIG
    #   RCFILE_PATH
    # output:
    #   boundfiles
    # sideeffect:
    #   write $RCFILE_PATH

    # parse procedure
    TABLE=
    # out_var_just core.target $target
    if !    stage1_is_text=1 \
            roles="" loaded="" \
            parse_inherit="" \
            parse_profile_optional="" \
            enve_parse_config "$ENVE_CONFIG_TEXT"; then
        _error "parse_config failed"
        return 1
    fi

    fire_eval

    # _trace "=============$newl$TABLE"
    LOGLEVEL=DEBUG log "=== parse ??? ==="
    LOGLEVEL=DEBUG logtable "$TABLE"

    # load procedure
    if !    TABLE="$TABLE" \
            p_init_module_info="base,loader,:,:,\
$ENVE_HOME/enve/core/base/enve.loader,\
source_exec=1;native_exec=1;,,\
$ENVE_HOME/enve/core/base" \
            exec_loaders_with_info; then
        _error "exec_loaders failed"
        return 1
    fi


    # add extra enve bound files
    fileonly=1 recursive="" listdir "${ENVE_HOME}/enve"
    while read -r envebound; do
        if [ -n "$envebound" ]; then
            out_var_just enve.bound "$envebound"
        fi
    done <<EOF
${_list}
EOF
    unset _list


    # resolve procedure
    if ! p_module_loaded="${module_loaded:-}" resolve_with_info; then
        return 1
    fi
    unset module_loaded

    LOGLEVEL=DEBUG log "=== resolve ??? ==="
    LOGLEVEL=DEBUG logtable "$TABLE"

    # generate final rcfile
    if ! execute_envdef "$TABLE" "${target:-}" > "$RCFILE_PATH"; then
        return 1
    fi
    # chmod 755 "$RCFILE_PATH"

}


get_rcfile_from_profiles_usecache() {
    # input:
    #   ENVE_ROLES
    #   ENVE_CONFIG_TEXT
    # output:
    #   rcfile path

    s=$ENVE_ROLES
    replace "@" ","
    roles=${s%%,}
    unset s

    mkrcfile() {
        if ! roles=$roles \
             ENVE_CONFIG_TEXT="$ENVE_CONFIG_TEXT" \
             RCFILE_PATH="$1" \
             get_rcfile_from_profiles_nocache; then
                return 1
        fi
    }

    if [ "${ENVE_CACHE_DIR:-}" != "nocache" ]; then
        p_text() {
            printf %s\\n "v20190308v1"
            printf %s\\n "v2023v5"
            printf %s\\n "$roles"
            printf %s\\n "$ENVE_CONFIG_TEXT"
        }
        # echo "p_text: $(p_text)" >&2
        p_valid() {
            fast_readtext "$CACHED/boundfiles" || {
                _trace F1
                return 0
            }
            boundfiles="$text"

            boundhashes=$(files_stats_by_liens "$boundfiles" 2>/dev/null) || {
                _trace F2
                return 0
            }
            fast_readtext "$CACHED/hashes" || {
                _trace F3
                return 0
            }
            excepted_boundhashes="$text"
            [ "${boundhashes}" = "${excepted_boundhashes}" ] || {
                _trace F4
                return 0
            }
            [ -s "$CACHED/rcfile" ] || {
                _trace F5
                return 0
            }
            echo 1
        }
        p_make() {
            mkrcfile "$CACHED/rcfile" || return 1
            cp "$CACHED/rcfile" "$CACHED/.zshrc"
            echo "$TABLE" >&2
            fast_table_subset bound
            fast_as_value
            boundfiles=$TABLE_AS
            boundhashes=$(files_stats_by_liens "$boundfiles")
            # _trace "profile: $ENVE_PROFILE"
            _trace "write to: $CACHED/boundfiles"
            printf %s "$boundfiles" > "$CACHED/boundfiles"
            printf %s "$boundhashes" > "$CACHED/hashes"
        }
        if ! RCFILE_PATH=$(settrace
                catalog=boundfile cache_path "rcfile" p_text p_make p_valid
                echo "$cached_path"); then
            return 1
        fi
    else
        fast_get_tempdir
        if ! tmprcfile="$(mkstemp "$d/rcfile.XXXXXX")"; then
            _error "failed to create tempfile"
            return 1
        fi
        mkrcfile "$tmprcfile"
        RCFILE_PATH=$tmprcfile
    fi
    _trace "RCFILE_PATH: $RCFILE_PATH"
    unset roles
}









gen_stab() {
    true '
    enve-fire       作為全功能發動機
    0. (O)收集ENVE_CONFIG_TEXT
    1. (O)如果有RCFILE_PATH則不再處理RCFILE
    2. (O)如果有提供daemon方法，利用他 (stab_args)
    3. (O)如果有提供參數提煉入CMD
    4. (O)如果有改變SHELL，使用新的SHELL (stab_with_shell)
    5. (O)如果有其他ENVE_SHIELD選項，繼續傳遞 (stab_env)
    6. (O)如果有其他PM選項，繼續傳遞 (stab_env)
    7. (O)CMD不為空，而有EXEC_USER/EXEC_GROUP/EXEC_CHROOT的情形，延長CMD
    8. (O)eval $rc_env CMD=\${CMD:-} exec ${SHELL:-sh} $ext_args -i
    '

    # EXEC_DAEMON 可以簡單的設定為setsid
    #
    # 為了避免新的行程與terminal分享信號與其他終端控制。
    # 呼叫setsid(2)會保證(PID = SID = PGID)，而斬斷與舊terminal的關係。
    #
    # 除非使用管道，發起任何子行程都會建立一個新的PGID。
    # 而(PID = PGID)的情況下沒辦法呼叫，setsid(2)。
    # 在這種情況下setsid(1)內部會先fork一次，再呼叫setsid(2)。
    # 因此造成光使用setsid(1)就會造成兩次fork。
    if [ -n "${EXEC_DAEMON:-}" ]; then
        stab_args="${stab_args:+$stab_args }$EXEC_DAEMON"
    fi

    for passvar in EXEC_SHIELD PIDFILE EXITFILE EXEC_STDIN EXEC_STDOUT EXEC_STDERR; do
        if eval [ -n \"\${$passvar:-}\" ]; then
            stab_env="${stab_env:+$stab_env }$passvar=\"\$$passvar\""
            stab_envs="$stab_envs $passvar"
        fi
    done

    # stab_with_shell() {

    # TODO: 使用系統預設，但是macos的bash-3.2的posix mode有問題
    if [ "$SHELL" = /bin/bash ]; then
        SHELL=/bin/sh
    fi

    case ${EXEC_SHELL:-"${SHELL:-sh}"} in
        */dash|*/ash|*/ksh|*/sh)
                stab_env="${stab_env:+$stab_env }ENV=\"$RCFILE_PATH\""
                stab_envs="$stab_envs ENV"
                stab_args="${stab_args:+$stab_args }$SHELL -i"
            ;;
        */bash)
                # use bash posix mode to prevent
                # expose secret rcfile location at commandline
                stab_env="${stab_env:+$stab_env }ENV=\"$RCFILE_PATH\""
                stab_envs="$stab_envs ENV"
                stab_args="${stab_args:+$stab_args }$SHELL --posix -i"
            ;;
        */zsh)
                d=$RCFILE_PATH
                fast_dirname
                ZDOTDIR=$d
                if [ ! -f "$ZDOTDIR/.zshrc" ]; then
                    ln -s "$RCFILE_PATH" "$ZDOTDIR/.zshrc"
                fi
                stab_env="${stab_env:+$stab_env }ZDOTDIR=\"$ZDOTDIR\""
                stab_envs="$stab_envs ZDOTDIR"
                # --no-rcs也會影響到ZDOTDIR
                stab_args="${stab_args:+$stab_args }$SHELL --no-global-rcs -i"
                # stab_args="${stab_args:+$stab_args }$SHELL --no-global-rcs --no-rcs -i"
            ;;
        *)
                die "unsuported shell ${EXEC_SHELL:-sh}"
            ;;
    esac

    # }

    # if [ -n "${EXEC_ARG1_AS_SCRIPT:-}" ]; then
    #     ARGSTR=
    #     fast_append_argument_quote2 "${1:-}"
    #     RC_SCRIPT=$ARGSTR
    #     shift
    # fi
    ARGSTR=
    for a in "$@"; do
        fast_append_argument_quote2 "$a"
    done
    RC_CMD=$ARGSTR

    # if [ -n "${EXEC_ARG1_AS_SCRIPT:-}" ]; then
    #     stab_env="${stab_env:+$stab_env }EXEC_ARG1_AS_SCRIPT=1"
    # fi
    stab_env="${stab_env:+$stab_env }RC_CMD=\"$RC_CMD\""
    stab_envs="$stab_envs RC_CMD"
}



ensure_caches() {
    fast_get_system
    ensure_readlink_command
    if [ -z "${ENVE_CACHE_DIR:-}" ]; then
        ENVE_CACHE_DIR=$(get_cachedir)
    fi
    export ENVE_CACHED_OS
    export ENVE_CACHE_DIR
    export ENVE_READLINK
}


true '

基本方式
1. exec     直接執行
2. detach   可watch  簡單的分離成daemon
3. daemon   可watch? 可定時 system代管

代管方式
4. service  可watch  可定時 pm代管 可多數目 可綁定現有的行程
5. job      可watch  可定時 pm代管 分配job
6. application  tmux-session 可connect
7. minion   可watch  pm代管 隨需分配 可在任意host執行

- workspace/dashboard
  - host: the workspace instance in local host or remote host
  - source: database,csv,log,scrollback
  - table: secret,host,repos,host.pm/tmux/syssrv,aws4,
  - task: app(enve-enter),view(source,table)/job/service/minion


## 20211107

一律使用ENV來驅動

1. ENV=RCFILE sh strap.sh "$@"
2. record "$@"; ENV=RCFILE CMD=CMD exec sh -i

最後1,3和而為一
RCFILE不能單獨執行，必須以
1. `ENV=RCFILE CMD=CMD exec sh -i`
2. `ZDOTDIR=$(dirname RCFILE) CMD=CMD exec zsh -i --no-global-rcs --no-rcs`

TODO 整合
enve-boot       deprecated
enve-enter      enve-rc-startup + enve-stab (deprecated)
enve-fire       enve-rc-startup + daemon + enve-stab
enve-daemon     deprecated
enve-stab
enve-shield     deprecated

enve-rc-startup 除了生產RCFILE，還要製作chroot，還有git-clone

enve-fire       作為全功能發動機
1. 如果有RCFILE_PATH則不在處理RCFILE
2. 如果有提供daemon方法，利用他
3. 如果有提供參數提煉入CMD
4. 如果有改變SHELL，使用新的SHELL
5. 如果有其他ENVE_SHIELD選項，繼續傳遞
6. 如果有其他PM選項，繼續傳遞
7. CMD不為空，而有EXEC_USER/EXEC_GROUP/EXEC_CHROOT的情形，延長CMD
8. eval $rc_env CMD=\${CMD:-} exec ${SHELL:-sh} $ext_args -i


TODO: module


1. 產生RCFILE_PATH
2. 執行
<ENV=RCFILE> <setsid> enve-stab -- <sudo> cmd
|            |                     |
|            ^ EXEC_DAEMON         |
^ EXEC_SHIELD_*/EXEC_STD*          |
                                   ^ EXEC_USER/EXEC_GROUP/EXEC_CHROOT

EXEC_SHELL
EXEC_DAEMON
EXEC_SHIELD
EXEC_ULIMIT
EXEC_USER
EXEC_GROUP
EXEC_CWD
EXEC_CHROOT
EXEC_STDIN
EXEC_STDOUT
EXEC_STDERR
PIDFILE
EXITFILE
RCFILE_PATH
EXEC_NAMESPACE_PID

EXEC_SHIELD_?
EXEC_SHIELD_INTERACTIVE_SHELL
EXEC_SHIELD_PAUSE_BEFORE_EXIT
EXEC_SHIELD_ALLOW_RESTART
EXEC_SHIELD_TIMEOUT
PM_?



'

# ENVE_EXEC_TABLE

fire2() {
    # pass
    #   ENVE_FIRE_DEPTH
    #   ENVE_CACHED_OS
    #   ENVE_CACHE_DIR
    #   ENVE_READLINK
    #   [PIDFILE]
    #   [EXITFILE]
    #
    # input
    #   {
    #     [ENVE_CONFIG_TEXT]
    #     [ENVE_ROLES]
    #   ,
    #     [EXEC_SSH_REMOTE]
    #     [RCFILE_PATH]
    #   }
    #   [ENVE_EXEC_TABLE]
    #
    # ENVE_EXEC_TABLE_N
    #   [RCFILE_STARTUP]
    #   [EXEC_SUBSHELL]
    #   [EXEC_ARG1_AS_SCRIPT]
    #   [EXEC_USE_EXEC]
    #   [EXEC_SHIELD]
    #   [EXEC_DAEMON]
    #   [EXEC_SHELL]
    #   [EXEC_STDIN]
    #   [EXEC_STDOUT]
    #   [EXEC_STDERR]
    #   [EXEC_USER]
    #   [EXEC_GROUP]
    #   [EXEC_CHROOT]
    #   [EXEC_CHROOT_METHOD]
    #   [EXEC_LIMIT]
    #   *args

    ensure_caches

    ENVE_FIRE_DEPTH=${ENVE_FIRE_DEPTH:-0}
    LOGTYPE=fire _info "level $ENVE_CACHED_OS $ENVE_FIRE_DEPTH $*"


    if [ -z "${RCFILE_PATH:-}" ] && [ -n "${ENVE_CONFIG_TEXT:-}" ]; then
        fast_system_roles

        # ENVE_FIRE_DEPTH="$((${ENVE_FIRE_DEPTH:--1} + 1))" \
        ENVE_FIRE_DEPTH=$((ENVE_FIRE_DEPTH + 1))
        ENVE_ROLES="${ENVE_ROLES:+,${ENVE_ROLES}},${out_system_roles}" \
        RCFILE_STARTUP="" \
        EXEC_SHIELD="" \
        get_rcfile_from_profiles_usecache
        if [ -z "$RCFILE_PATH" ]; then
            return 1
        fi
    fi

    if [ -n "${RCFILE_STARTUP:-}" ]; then
        echo "$RCFILE_PATH"
        return 0
    fi

    if [ "$#" -gt 0 ] && [ -n "${EXEC_USER:-}${EXEC_GROUP:-}${EXEC_CHROOT:-}" ]; then
        case ${EXEC_CHROOT_METHOD:-sudo} in
            sudo)
                    # -E (preserve environment)
                    # -H (set HOME)
                    set -- 'sudo' '-E' '-H' \
                            ${EXEC_GROUP:+'-g' \'$EXEC_GROUP\'} \
                            ${EXEC_USER:+'-u' \'$EXEC_USER\'} \
                            ${EXEC_CHROOT:+'-R' \'$EXEC_CHROOT\'} \
                            "$@"
                ;;
            chpst)
                    set -- 'chpst' \
                            ${EXEC_USER:+'-u' \'$EXEC_USER:${EXEC_GROUP:-$EXEC_USER}\'} \
                            ${EXEC_CHROOT:+'-l' \'$EXEC_CHROOT\'} \
                            "$@"
                ;;
            chroot)
                    set -- 'chroot' \
                            ${EXEC_USER:+\'--userspec=$EXEC_USER:${EXEC_GROUP:-$EXEC_USER}\'} \
                            \'${EXEC_CHROOT:-/}\' \
                            "$@"
                ;;
            chroot-bsd)
                    set -- 'chroot' \
                            ${EXEC_GROUP:+'-g' \'$EXEC_GROUP\'} \
                            ${EXEC_USER:+'-u' \'$EXEC_USER\'} \
                            \'${EXEC_CHROOT:-/}\' \
                            "$@"
                ;;
        esac
    fi

    if [ -z "${RCFILE_PATH:-}" ]; then
        ${EXEC_USE_EXEC:+exec} "$@"
        return $?
    elif [ ! -e "$RCFILE_PATH" ]; then
        error "fail to generate rcfile"
        if [ -t 0 ] && [ -n "${EXEC_RESCURE:-}" ]; then
            info "active rescure environment"
            RCFILE_PATH="$ENVE_HOME/enve/bootstrap.rcfile"
        elif [ -t 0 ]; then
            any_key_continue
            return 71
        else
            return 71
        fi
    elif [ -n "${EXEC_SUBSHELL:-}" ]; then
        (
            # if type -t "$EXEC_SUBSHELL" >/dev/null; then
            #     _exec_func=$EXEC_SUBSHELL
            # fi
            _exec_func=$EXEC_SUBSHELL
            . "$RCFILE_PATH"
            unset EXEC_SUBSHELL RCFILE_PATH

            # EXEC_ARG1_AS_SCRIPT is useful in this place?
            if [ -n "${1:-}" ] && [ -n "${EXEC_ARG1_AS_SCRIPT:-}" ]; then
                unset EXEC_ARG1_AS_SCRIPT
                $1
            elif [ -f "${1:-}" ]; then
                read -r first_line < "$1"
                if [ "$first_line" = "#!/bin/sh" ]; then
                    _SOURCE_FILE=$1
                    shift
                    . "$_SOURCE_FILE"
                fi
            fi
            if [ -n "${_exec_func:-}" ] && type -t "${_exec_func}" >/dev/null; then
                ${_exec_func}
            fi
        )
        return $?
    else
        rcfile_parse_meta_table "$RCFILE_PATH"
        TABLE=$META_TABLE fast_table_tail "SHELL"
        _shell=$TABLE_TAIL
    fi

    stab_args=
    stab_env=
    stab_envs=
    SHELL=${_shell:-"$SHELL"} gen_stab "$@"

    if [ -n "${EXEC_SSH_REMOTE:-}" ]; then
        stab_args="ssh -o 'ConnectTimeout 3' -o 'SendEnv $stab_envs' $stab_args"
    fi
    _trace "stab_env: $stab_env"
    _trace "stab_envs: $stab_envs"
    _trace "stab_args: $stab_args"
    _trace "cmd: $stab_env ${EXEC_USE_EXEC:+exec} $stab_args"
    eval $stab_env "${EXEC_USE_EXEC:+exec}" $stab_args


}
