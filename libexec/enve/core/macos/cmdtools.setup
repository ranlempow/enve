#!/bin/sh

# shellcheck source=libexec/enve/baselib
. "$ENVE_HOME/enve/baselib"

settrace

# refer: https://github.com/Homebrew/install/blob/master/install.sh

major_minor() {
  echo "${1%%.*}.$(
    x="${1#*.}"
    echo "${x%%.*}"
  )"
}

version_gt() {
  [ "${1%.*}" -gt "${2%.*}" ] || [ "${1%.*}" -eq "${2%.*}" -a "${1#*.}" -gt "${2#*.}" ]
}
version_ge() {
  [ "${1%.*}" -gt "${2%.*}" ] || [ "${1%.*}" -eq "${2%.*}" -a "${1#*.}" -ge "${2#*.}" ]
}
version_lt() {
  [ "${1%.*}" -lt "${2%.*}" ] || [ "${1%.*}" -eq "${2%.*}" -a "${1#*.}" -lt "${2#*.}" ]
}

abort() {
  printf "%s\n" "$@" >&2
  exit 1
}

execute() {
    if ! "$@";then
        abort "$(printf "Failed during: %s" "$*")"
    fi
}

execute_sudo() {
    ohai=1 echo "/usr/bin/sudo" "$@"
    execute "/usr/bin/sudo" "$@"
}



should_install_command_line_tools() {
    macos_version="$(major_minor "$(/usr/bin/sw_vers -productVersion)")"
    if version_gt "${macos_version}" "10.13"; then
        ! [ -e "/Library/Developer/CommandLineTools/usr/bin/git" ]
    else
        ! [ -e "/Library/Developer/CommandLineTools/usr/bin/git" ] || \
        ! [ -e "/usr/include/iconv.h" ]
    fi
}

check_cmdtools() {
    if ! should_install_command_line_tools; then
        return 0
    else
        return 1
    fi
}

install_cmdtools() {
    macos_version="$(major_minor "$(/usr/bin/sw_vers -productVersion)")"
    if should_install_command_line_tools && \
        version_ge "${macos_version}" "10.13"; then

        ohai=1 echo "Searching online for the Command Line Tools"
        # This temporary file prompts the 'softwareupdate' utility to list the Command Line Tools
        clt_placeholder="/tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress"
        execute_sudo /usr/bin/touch "${clt_placeholder}"

        clt_label_command="/usr/sbin/softwareupdate -l |
                            grep -B 1 -E 'Command Line Tools' |
                            awk -F'*' '/^ *\\*/ {print \$2}' |
                            sed -e 's/^ *Label: //' -e 's/^ *//' |
                            sort -V |
                            tail -n1"
        # clt_label="$(chomp "$(/bin/bash -c "${clt_label_command}")")"
        clt_label=$(/bin/bash -c "${clt_label_command}")
        if [ -n "${clt_label}" ]; then
            ohai=1 echo "Installing ${clt_label}"
            execute_sudo "/usr/sbin/softwareupdate" "-i" "${clt_label}"
            execute_sudo "/usr/bin/xcode-select" "--switch" \
                         "/Library/Developer/CommandLineTools"
        fi
        execute_sudo "/bin/rm" "-f" "${clt_placeholder}"
    fi

    # Headless install may have failed, so fallback to original 'xcode-select' method
    if should_install_command_line_tools && [ -t 0 ]; then
        ohai=1 echo "Installing the Command Line Tools (expect a GUI popup):"
        execute "/usr/bin/xcode-select" "--install"
        echo "Press any key when the installation has completed."
        getc
        execute_sudo "/usr/bin/xcode-select" "--switch" "/Library/Developer/CommandLineTools"
    fi

    if ! output="$(/usr/bin/xcrun clang 2>&1)" && [ -z "${output##*"license"*}" ]; then
        abort "$(
            cat <<EOABORT
You have not agreed to the Xcode license.
Before running the installer again please agree to the license by opening
Xcode.app or running:
    sudo xcodebuild -license
EOABORT
        )"
    fi

}

$1_cmdtools
