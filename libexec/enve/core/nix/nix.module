#!/bin/sh

# shellcheck source=libexec/enve/baselib
. "$ENVE_HOME/enve/baselib"

# shellcheck source=libexec/enve/tablelib
. "$ENVE_HOME/enve/tablelib"

settrace

resolve_nix() {
    # given_shell=$(table_tail "shell")
    # fast_table_tail "enve\\.shell"
    # given_shell=$TABLE_TAIL

    fast_table_tail "enve\\.shell"
    d=${TABLE_TAIL:-bash}
    fast_basename
    given_shell=$d

    if [ "$(table_tail "enve\\.no_nix")" = "true" ]; then
        if [ -n "$given_shell" ]; then
            shellpath=$(command -v $given_shell)
            out_var SHELL "$shellpath"
            out_raw_fast SHELL "$shellpath" META
        else
            out_var SHELL "$SHELL"
            out_raw_fast SHELL "$SHELL" META
        fi
        [ -n "$TABLE" ] && printf %s\\n "$TABLE"
        return
    fi

    PRJ_NAME="$(table_tail "PRJ_NAME")"

    nix_channel_url="$(table_tail "nix\\.channel\\.url")"
    # nix_channel_sha256="$(table_tail nix.channel.sha256)"

    if [ -z "${nix_channel_url:-}" ]; then
        nix_channel_version="$(table_tail nix.channel.version)"
        # TODO:
        if [ -z "$nix_channel_version" ]; then
            # nix_channel_version=20.09
            # nix_channel_version=21.05
            nix_channel_version=22.11
        fi
        nix_channel_url="https://github.com/NixOS/nixpkgs/archive/$nix_channel_version.tar.gz"
    fi

    # pkgs="$(table_subset "nix\\.require" | as_concat ' ')"
    pkgs="$(table_subset "nix\\.packages" | as_concat ' ')"
    pkgs="$pkgs $(table_subset "nix\\.require\\.packages" | as_concat ' ')"

    # echo "pkgs: $pkgs" >&2
    LOGTYPE=nix _info "pkgs: $pkgs"

    # nix_root="$(resolve_path "$(table_tail "nix\\.root")")"
    fast_table_tail "nix\\.root"
    d=$TABLE_TAIL
    fast_resolve_path
    nix_root=$d
    nix_root=${nix_root:-/nix/var/nix/profiles/default}

    # if [ -e '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' ]; then
    #   . '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
    # fi

    # echo "$(table_subset "nix\\.files")" >&2
    nix_extra=
    for file in $(table_subset "nix\\.files" | as_value); do
        absfile="$(resolve_path "$file")"
        nix_extra="${nix_extra}${newl}$(cat "$absfile")"
    done
    if [ -n "$nix_extra" ]; then
        LOGLEVEL=DEBUG log "==== NIX_EXTRA ===="
        LOGLEVEL=DEBUG log "$nix_extra"
    fi

    nix_config="$(
        { table_subset "nix.config\\..*"; } | as_postfix "nix.config." | \
        while read -r name value; do
            if [ -n "$name" ]; then
                echo "$name = $value;"
            fi
        done
    )"

    # install nix, if /nix not in system
    if [ ! -d /nix ]; then
        {
            echo "warning: nix is not installed on this system."
            echo ""
            echo "you should prepare the essential tools that required by enve."
            echo "those tools includes bash, curl, shasum, md5sum, tar, mktemp, maybe more"
            echo "and all tools in posix definition."
            echo "we recommand install nix as soon as possible with:"
            echo "    enve bootstrap"
        } >&2
        _error "your system do not have nix installed, try install but failed"
        return 1
        # $ZERO/install_nix.sh install >&2 || {
        #     _error "your system do not have nix installed, try install but failed"
        #     return 1
        # }
    fi

    p_text() {
        printf %s\\n "v20190308v9"
        printf %s\\n "$nix_root"
        printf %s\\n "$nix_channel_url"
        printf %s\\n "$nix_config"
        printf %s\\n "$nix_extra"
        printf %s\\n "$PRJ_NAME"
        printf %s\\n "$pkgs"
    }

    p_make() {
        # TODO: add findutils back
        # "man-db" is not supported on ‘x86_64-apple-darwin’, use "man" instand
        # at pkg-2022.05 rename bashCompletion => bash-completion

        # if [ "$nix_channel_version" -ge "2022.05" ]; then
        if [ "${nix_channel_version%.*}" -ge "2022" ] ||
           [ "${nix_channel_version#*.}" -ge "5" ]; then
            bash_completion=bash-completion
        else
            bash_completion=bashCompletion
        fi
        # "$nix_root"/bin/nix-build --no-out-link --show-trace
        if env_root="$(
            NIX_REMOTE=daemon \
            NIX_SSL_CERT_FILE=/nix/var/nix/profiles/default/etc/ssl/certs/ca-bundle.crt \
            NIXPKGS_ALLOW_UNFREE=1 \
        "$nix_root"/bin/nix-build --no-out-link - <<EOF
        let
          pkgs = import (builtins.fetchTarball {
            url = $nix_channel_url;
          }) { config = { $nix_config }; };
          $nix_extra
        in
          pkgs.buildEnv {
            name = "${PRJ_NAME:-}${PRJ_NAME:+-}env";
            paths = with pkgs; [
              coreutils diffutils which file
              gnused gnugrep gawkInteractive gnutar gzip bzip2 less gettext
              git gnupatch
              xz unzip
              bashInteractive ${bash_completion}
              time rsync
              man
              perl lesspipe
              $pkgs
            ];
          }
EOF
        )"; then
            echo "$env_root" > "$CACHED/env_root"
        else
            return 1
        fi
    }
    catalog=nix-env cache_path ./env_root p_text p_make
    fast_readtext $cached_path
    env_root=${text%$newl}

    LOGTYPE=nix _info "env_root: $env_root"

    out_var ENV_ROOT "$env_root"
    out_var "enve.sysroots" "$env_root"
    if [ -n "$given_shell" ]; then
        out_var SHELL "$env_root/bin/$given_shell"
        out_raw_fast SHELL "$env_root/bin/$given_shell" META
    else
        out_var SHELL "$env_root/bin/bash"
        out_raw_fast SHELL "$env_root/bin/bash" META
    fi
    [ -n "$TABLE" ] && printf %s\\n "$TABLE"
    [ -n "${env_root:-}" ] && out_list PATH "$env_root/bin"
}



main() {
    info "IN $ZERO/enve.module"
    TABLE=$(cat "${configfile:--}")
    for proc in nix; do

        info "IN resolve_$proc"
        if ! TABLE=$(TABLE=$TABLE resolve_$proc); then
            _error "error at resolve_$proc"
            exit 1
        fi
        # info "OUT resolve_$proc"
    done

    info "OUT $ZERO/enve.module"
    [ -n "$TABLE" ] && printf %s\\n "$TABLE"
}

# if [ "${TEST:-}" != "test" ]; then
# fi

