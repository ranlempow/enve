#!/bin/sh

# shellcheck source=libexec/enve/base
. "$ENVE_HOME/enve/base"

settrace

d=$0
fast_dirname
ZERO=$d
unset d

exec_shell() {
    shell=${invoke_shell:-$SHELL}

    # posix mode
    # ENV=$PWD/e zsh -c 'exec -a sh zsh "$@"' "$@"
    # ENV=$PWD/e bash --posix
    # ksh/bash POSIXLY_CORRECT=YES

    d=$shell
    fast_basename
    shell_base=$d

    case $shell_base in
        dash|ash|ksh|sh)
                rc_arg=
                rc_env=ENV=\'$RCFILE_PATH\'
            ;;
        zsh)
                d=$RCFILE_PATH
                fast_dirname
                ZDOTDIR=$d
                if [ ! -f "$ZDOTDIR/.zshrc" ]; then
                    ln -s "$RCFILE_PATH" "$ZDOTDIR/.zshrc"
                fi
                rc_arg=
                rc_env=ZDOTDIR=\'$ZDOTDIR\'
            ;;
        bash)
                rc_arg=--rcfile
            ;;
        *)
                die "unsuported shell $shell"
            ;;
    esac
    eval_shell="\
env -i $bypass_envs${rc_env:+" $rc_env"} \
'$shell'${rc_arg:+" $rc_arg '$RCFILE_PATH'"} -i\
"
    # eval_shell="$eval_shell '$shell'${rc_arg:+" $rc_arg '$RCFILE_PATH'"} -i"
    LOGTYPE="eval" _trace "$eval_shell"
}


_install_config() {
    path=$1
    template=$2
    if [ -e "$path" ] ; then
        fast_readtext "$path"
        existing_text=$text
        fast_readtext "$template"
        if [ "$text" != "$existing_text" ]; then
            i=1
            while ! mv "$path" "$path.bak.$i"; do
                i=$((i+1))
                if [ "$i" -gt 100 ]; then
                    return 1
                fi
            done
            cp "$template" "$path"
            _info "create $path"
        fi
    else
        cp "$template" "$path"
        _info "create $path"
    fi
}

# TODO: move to core/term
terminal_config() {
    _install_config ~/.tmux.conf "$ZERO/../term/tmux.conf"
    _install_config ~/.inputrc "$ZERO/../term/inputrc"
    if [ -d ~/.config/kitty ] ; then
        _install_config ~/.config/kitty/kitty.conf "$ZERO/../term/kitty.conf"
        _install_config ~/.config/kitty/macos-launch-services-cmdline "$ZERO/../term/kitty.macos-launch-services-cmdline"
    fi
}

terminal_config

case $target in
    shell)
            exec_shell
            eval exec "$eval_shell"
        ;;
    run)
            args=$(save "$@")
            eval exec env -i "$bypass_envs" sh \"\$RCFILE_PATH\" "$args"
        ;;
    loader|module)
            # echo "RUN_MOD: $@"
            exec sh "$RCFILE_PATH" "$@"
        ;;
    terminal)
        case ${invoke_termainal:-native} in
            native)
                    exec_shell
                    eval exec "$ENVE_HOME/enve/script/term.applescript" "\"exec $eval_shell\""
                ;;
            kitty)
                    if [ ! -e /Applications/kitty.app ]; then
                        # shellcheck source=libexec/enve/bootlib
                        . "$ENVE_HOME/enve/bootlib"
                        ensure_brew
                        brew cask install kitty
                    fi
                    exec_shell
                    #  --config <CONFIG>, -c <CONFIG>
                    #  --override <OVERRIDE>, -o <OVERRIDE>

                    # shellcheck disable=2009
                    if ps -Al | grep "[Kk]itty" >/dev/null 2>&1; then
                        open -a /Applications/kitty.app
                        kitty=/Applications/kitty.app/Contents/MacOS/kitty
                        eval $kitty --single-instance /bin/sh -c "\"exec $eval_shell\""
                    else
                        echo "kitty --single-instance /bin/sh -c \"exec $eval_shell\"" \
                                > ~/.config/kitty/macos-launch-services-cmdline
                        open -a /Applications/kitty.app
                        echo "kitty --single-instance" > \
                                ~/.config/kitty/macos-launch-services-cmdline
                    fi
                ;;
        esac
        ;;
esac

