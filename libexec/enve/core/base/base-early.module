#!/bin/sh
#
#
# codebase.base(layout.root)
# codebase.out
# TODO: codebase.tmp
# TODO: codebase.cache
# TODO: codebase.data
# TODO: codebase.extra
# variable.*
#
# -> CB_NAME(PRJ_NAME)
# -> CB_BASE(PRJROOT)
# -> CB_OUT(PRJ_OUT)


# shellcheck source=libexec/enve/baselib
. "$ENVE_HOME/enve/baselib"

# shellcheck source=libexec/enve/tablelib
. "$ENVE_HOME/enve/tablelib"

# shellcheck source=libexec/enve/pathutils
. "$ENVE_HOME/enve/pathutils"

settrace

resolve_first() {
    [ -n "$TABLE" ] && printf %s\\n "$TABLE"
    out_join BYPASS ' '
    # out_list BYPASS "HOME"
    # out_list BYPASS "USER"
    out_var HOME "$HOME"
    out_var USER "$USER"
    fast_get_tempdir --posix
    out_var TMPDIR "$d"
}


resolve_basic_early() {
    [ -n "$TABLE" ] && printf %s\\n "$TABLE"
    # PRJROOT="$(resolve_path "$(table_tail "layout\\.root")")"
    fast_table_tail "layout\\.root"
    if [ -n "$TABLE_TAIL" ]; then
        PRJROOT=$TABLE_TAIL
        out_var PRJROOT "$TABLE_TAIL"
    else
        PRJROOT=
    fi

    if [ -d "$PRJROOT/.git" ]; then
        PRJ_VERSION=$(cd $PRJROOT; git rev-parse --short HEAD)
        out_var "PRJ_VERSION" "$PRJ_VERSION"
    fi

    { table_subset "variable\\..*" || true; } | as_postfix "variable." | \
    while read -r name value; do
        out_var "$name" "$value"
    done

    config_filename=$(table_tail "enve\\.configs")
    if [ "${config_filename%.enve.ini}" != "$config_filename" ]; then
        name=$(basename "$config_filename")
        PRJ_NAME=${name%.enve.ini}
    elif [ -n "$PRJROOT" ]; then
        d=$PRJROOT
        fast_basename
        PRJ_NAME=$d
    else
        PRJ_NAME=temporary
        # PRJ_NAME=$(basename "$(dirname "$(resolve_path '.')")")
    fi
    out_var "PRJ_NAME" "$PRJ_NAME"
    out_escape_fast "PRJ_NAME" "$PRJ_NAME" META

    fast_table_tail "enve\\.roles"
    s=$TABLE_TAIL
    replace '@' ','
    s=",$s,"
    if [ -z "${s%*,build,*}" ] || [ -z "${s%*,deploy,*}" ]; then
        fast_table_tail "layout\\.out"
        out=$TABLE_TAIL
        if [ -z "$out" ]; then
            fast_get_tempdir
            # out=$(mkdtemp ${PRJ_NAME}-out)
            out="$d/${PRJ_NAME}-out"
        fi
        mkdir -p "$out"
        out_var "PRJ_OUT" "$out"
    fi

    fast_table_tail "codebase\\.out"
    s=$TABLE_TAIL

    out=
    if [ "$s" = "true" ]; then
        d=../out
        fast_resolve_path
        normalize "$d"
        out=$ret
    elif [ -n "$s" ]; then
        out=$s
    fi
    if [ -n "$out" ]; then
        out_var "PRJ_OUT" "$out"
        out_var "CODEBASE_OUT" "$out"
        out_fast cachedir "$out"
    fi
}



resolve_ssh() {
    [ -n "$TABLE" ] && printf %s\\n "$TABLE"
    out_list BYPASS "SSH_CONNECTION"
    out_list BYPASS "SSH_TTY"
    out_list BYPASS "SSH_CLIENT"
    # if SSH_CONNECTION define, terminal is using ssh

}

resolve_shell() {
    [ -n "$TABLE" ] && printf %s\\n "$TABLE"
    target="$(table_tail "core\\.target")"
    if  [ "$target" = "shell" ]; then
        # TODO: 應該移到base-late
        out_join ENVE_BASHOPTS ':'
        out_join ENVE_SHELLOPTS ':'
        out_join ENVE_ZSHOPTS ':'

        out_list "ENVE_SHELLOPTS" "$(table_subset "shell\\.set" | as_concat ":" || true)"
        out_list "ENVE_BASHOPTS" "$(table_subset "shell\\.shopt" | as_concat ":" || true)"
        out_list "ENVE_ZSHOPTS" "$(table_subset "shell\\.setopt" | as_concat ":" || true)"

        out_code sh 'OLDIFS="$IFS"; IFS=":";'
        out_code sh 'for opt in $ENVE_SHELLOPTS; do if [ "${opt#-}" = "$opt" ]; then set -o $opt; else set +o ${opt#-}; fi; done'
        out_code sh 'if [ -n "${BASH_VERSION:-}" ]; then'
        out_code sh ' set +o posix'
        out_code sh ' for opt in $ENVE_BASHOPTS; do if [ "${opt#-}" = "$opt" ]; then shopt -s $opt; else shopt -u ${opt#-}; fi; done'
        out_code sh 'elif [ -n "${ZSH_VERSION:-}" ]; then'
        out_code sh ' setopt sh_word_split'
        out_code sh ' for opt in $ENVE_ZSHOPTS; do if [ "${opt#-}" = "$opt" ]; then setopt $opt; else unsetopt ${opt#-}; fi; done'
        out_code sh ' unsetopt sh_word_split'
        out_code sh 'fi'
        out_code sh 'IFS="$OLDIFS"'
        out_code sh 'unset ENVE_SHELLOPTS'
        out_code sh 'unset ENVE_BASHOPTS'
        out_code sh 'unset ENVE_ZSHOPTS'

        out_code sh 'if [ -n "${ENVE_RCRESOLVE_PIDFILE:-}" ]; then'
        out_code sh '  _pid=$$'
        out_code sh '  (set -o noclobber; '
        out_code sh '   if ! { echo ${_pid} > "$ENVE_RCRESOLVE_PIDFILE"; } 2>/dev/null; then'
        out_code sh '     echo "PIDFILE already exist, can not execute alone" >&2'
        out_code sh '     exit 2'
        out_code sh '   fi)'
        out_code sh '  unset _pid'
        out_code sh 'fi'
        out_code sh 'unset ENVE_RCRESOLVE_PIDFILE'

# 內建清空原本的環境變數，但保留BYPASS的部分，因此不用在呼叫env -i
# envlist=
# while read -r y z; do
#     eval tmp_$z
#     z=${z%%=*}
#     unset y $z
#     envlist="${envlist} $z"
# done <<EOF
# $(export -p)
# EOF

# for z in $envlist; do
#     if [ -n "${BYPASS:-}"] && [ -z "${BYPASS%%*" "$z" "*}" ]; then
#         eval export $z=\"\$tmp_$z\"
#     fi
#     unset tmp_$z
# done
# unset envlist z

        # out_list "ENVE_SHELLOPTS" "-posix"
    fi

    # given_shell=$(table_tail "shell")
    # if [ -n "$given_shell" ]; then
    #     out_var SHELL "$given_shell"
    # fi
}


main() {
    info "IN $ZERO/base-early.module"
    TABLE=$(cat "${configfile:--}")
    for proc in basic_early first ssh shell; do
        info "IN resolve_$proc"
        if ! TABLE=$(TABLE=$TABLE resolve_$proc); then
            _error "error at resolve_$proc"
            exit 1
        fi
        # info "OUT resolve_$proc"
    done

    # for proc in first basic command nix terminal prompt macos ssh \
    #             shell secret boundfiles; do

    #     info "IN resolve_$proc"
    #     if ! TABLE=$(TABLE=$TABLE resolve_$proc); then
    #         _error "error at resolve_$proc"
    #         exit 1
    #     fi
    #     # info "OUT resolve_$proc"
    # done

    info "OUT $ZERO/base-early.module"
    [ -n "$TABLE" ] && printf %s\\n "$TABLE"
}
