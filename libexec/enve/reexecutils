#!/usr/bin/env bash


if [ -n "${HAVE_ENVE_REEXECUTILS:-}" ]; then
    return 0
fi
HAVE_ENVE_REEXECUTILS=1

# shellcheck source=libexec/enve/envelib
. "$ENVE_HOME/enve/base"
# shellcheck source=libexec/enve/cachelib
. "$ENVE_HOME/enve/cachelib"
# shellcheck source=libexec/enve/urlutils
. "$ENVE_HOME/enve/urlutils"


_get_program_meta() {
    programfile=$1
    attr=$2
    defline="$(grep "# ${attr}=" "$programfile")"
    eval "${defline#??}"
    eval echo \"\$"${attr}"\"
}

_get_program_meta_all() {
    programfile=$1
    while read -r attrdef; do
        eval "${attrdef#?}"
    done <<EOF
$(grep -e "^# __[A-Z_]*__=[^; ]*$" "$programfile")
EOF
}

reexec_if_req_not_match() {
    reqver=$1
    reqshell=$2
    shift 2
    if [ -n "${ENVE_REEXEC:-}" ]; then
        return 0
    fi

    # curver=$(_get_program_meta "$ENVE_HOME/$ENVE_PROGRAM" __VERSION__)
    # repo=$(_get_program_meta "$ENVE_HOME/$ENVE_PROGRAM" __REPO__)
    _get_program_meta_all "$ENVE_HOME/$ENVE_PROGRAM"
    if [ -n "${reqver:-}" ] && [ "$__VERSION__" != "$reqver" ]; then
        # NEW_ENVE_HOME="$(url="$__REPO__" commit=$reqver fetch_git_commit)/libexec"
        NEW_ENVE_HOME="$(fetch "${__REPO__}#$reqver" "%cache" "dir")/libexec"
    else
        NEW_ENVE_HOME=$ENVE_HOME
    fi

    curshell=$(ps -p "$$" -o comm || echo "$SHELL" )
    NEW_SHELL=${reqshell:-$curshell}

    if [ "$NEW_ENVE_HOME" != "$ENVE_HOME" ] || [ "$NEW_SHELL" != "$curshell" ]; then
        _debug "reexec $NEW_SHELL $NEW_ENVE_HOME/$ENVE_PROGRAM"
        ENVE_REEXEC=1 exec "$NEW_SHELL" "$NEW_ENVE_HOME/$ENVE_PROGRAM" "$@"
    else
        _debug "noexec $NEW_SHELL $NEW_ENVE_HOME/$ENVE_PROGRAM"
    fi
}

# system_install_default_version() {
#     :
# }
