#!/bin/sh

# shellcheck shell=sh disable=2086 disable=2031
true


# __NAME__=enve
# __VERSION__=0.1.0
# __REPO__=https://github.com/ranlempow/enve.git

if [ "${PATH##*/sbin}" = "$PATH" ]; then
    # for /sbin/md5
    PATH=$PATH:/sbin
fi


if [ -z "${ENVE_HOME:-}" ]; then
    echo "fatal: ENVE_HOME not set." >&2
    exit 1
fi
ENVE_PROGRAM=enve/enve

# shellcheck source=libexec/enve/base
. "$ENVE_HOME/enve/base"
settrace

# shellcheck source=libexec/enve/bootlib
. "$ENVE_HOME/enve/bootlib"
basic_require_ensure

if [ -n "${ENVE_REQ_VERSION:-}" ] || [ -n "${ENVE_REQ_SHELL:-}" ]; then
    # shellcheck source=libexec/enve/reexecutils
    . "$ENVE_HOME/enve/reexecutils"
    reexec_if_req_not_match "${ENVE_REQ_VERSION:-}" "${ENVE_REQ_SHELL:-}" "$@"
fi

# shellcheck source=libexec/enve/envelib
. "$ENVE_HOME/enve/envelib"



print_help() {
    prog="$(basename "$0")"
    echo "Usage: $prog [COMMON_OPTIONS] <COMMAND>"
    echo
    echo "Common Options"
    echo "    -f, --file <file>     parse config from the file"
    echo "    -c, --config <key>=<value>"
    echo "                          append a key-value pair to config"
    echo "    -r, --role <role>     add a role to the roles set"
    echo "    -p, --project <path>  default project is PWD, specfice another project folder instead"
    echo
    echo "Command"
    echo "    noop                  not to promote any actions"
    echo "    shell                 enter a interactive shell for the environment"
    echo "    run                   run command in the environment"
    echo "    launch                open a terminal for the environment"
    echo "    boot                  enter a default shell environment"
}


ENVE_PROFILE=
ENVE_CONFIG=
ENVE_ROLES=

# echo "args: $@" >&2
cmd=

while [ -n "${1:-}" ]; do
    case $1 in
        -f|--file)
                case ${2:-} in -*|'')
                    die "you must supply a file path" ;; esac
                ENVE_PROFILE="${ENVE_PROFILE:-}${ENVE_PROFILE:+,}$2"
                shift 2
            ;;
        -c|--config)
                case ${2:-} in
                    -*)
                            die "you must supply a vaild key-value pair"
                        ;;
                    +*=*)
                            ctype=LIST
                        ;;
                    ?*=*)
                            ctype=VAR
                        ;;
                    *)
                            die "you must supply a vaild key-value pair"
                        ;;
                esac
                key="${2%%"="*}"
                value="${2#*"="}"
                ENVE_CONFIG="$(  printf "%s${ENVE_CONFIG:+\n}${ctype}\\t%s\\t%s" \
                                        "${ENVE_CONFIG:-}" "$key" "$value")"
                shift 2
            ;;
        -r|--role)
                case ${2:-} in -*|'')
                    die "you must supply a role" ;; esac
                ENVE_ROLES="${ENVE_ROLES:-}${ENVE_ROLES:+,}$2"
                shift 2
            ;;
        -p|--procedure)
            ;;
        -t|--target)
            ;;
        -*)
                die "unknown option: $1"
            ;;
        noop|define|run|launchrun|test)
                cmd=$1
                shift
                break
            ;;
        shell|terminal|launch)
                cmd=$1
                shift
                if [ -n "${1:-}" ]; then
                    ENVE_PROFILE="${ENVE_PROFILE:-}${ENVE_PROFILE:+,}$1"
                    shift
                fi
                break
            ;;
        boot)
                shift
                if [ -n "${1:-}" ]; then
                    subtype=$1
                fi
                ENVE_PROFILE="$ENVE_HOME/enve/preset/boot${subtype:+"-$subtype"}.enve.ini"
                cmd=shell
                break
            ;;
        auto)
                cmd=auto
                shift
                if [ -n "${1:-}" ]; then
                    ENVE_PROFILE="${ENVE_PROFILE:-}${ENVE_PROFILE:+,}$1"
                    shift
                fi
            ;;
        *)
                if [ "${1##*/}" != "$1" ] || [ "${1##*.}" != "$1" ]; then
                    cmd=auto
                    ENVE_PROFILE="${ENVE_PROFILE:-}${ENVE_PROFILE:+,}$1"
                    shift
                else
                    _error "unknown command: $1"
                    print_help >&2
                    die
                fi
            ;;

    esac
done

# TODO: remove this
if [ "$cmd" = "define" ]; then
    return
fi


ENVE_PROFILE="${ENVE_EXTRA_PROFILE:-}${ENVE_EXTRA_PROFILE:+,}${ENVE_PROFILE}"
ENVE_CONFIG="${ENVE_EXTRA_CONFIG:-}${ENVE_EXTRA_CONFIG:+$newl}${ENVE_CONFIG}"
ENVE_ROLES="${ENVE_EXTRA_ROLES:-}${ENVE_EXTRA_ROLES:+,}${ENVE_ROLES}"

export ENVE_EXTRA_PROFILE=
export ENVE_EXTRA_CONFIG=
export ENVE_EXTRA_ROLES=

# launch_prefix="\
# ENVE_EXTRA_PROFILE='$ENVE_PROFILE' \
# ENVE_EXTRA_CONFIG='$ENVE_EXTRA_ROLES' \
# ENVE_EXTRA_ROLES='$ENVE_ROLES'\
# "


is_from_gui() {
    ppp_sec=
    pp_sec=

    # shellcheck disable=2034
    while IFS=' :' read -r week month day hour min sec year; do
        if [ -z "$ppp_sec" ]; then
            ppp_sec=$(( ${day##0} * 10000 + ${hour##0} * 3600 + ${min##0} * 60 + ${sec##0} ))
        else
            pp_sec=$(( ${day##0} * 10000 + ${hour##0} * 3600 + ${min##0} * 60 + ${sec##0} ))
        fi
    done <<EOF
$(LANG=C ps -p $PPID,$$ -o lstart=)
EOF

    if [ "$((pp_sec - ppp_sec))" -le 1 ] ; then
        return 0
    else
        return 1
    fi
}


case $cmd in
    noop)
        ;;
    auto)
        if [ $# -eq 0 ]; then
            if is_from_gui; then
                PRESS_ENTER_TO_EXIT_ERRORTRACE=1 \
                enve_fire terminal
            else
                enve_fire shell
            fi
        else
            enve_fire run "$@"
        fi
        ;;
    run)
            enve_fire run "$@"
        ;;
    shell)
            enve_fire shell
        ;;
    test)
            enve_fire test
        ;;
    terminal)
            enve_fire terminal
        ;;
    '')
            print_help >&2
            die
        ;;
esac





