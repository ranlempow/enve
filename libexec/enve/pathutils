#!/usr/bin/env bash


if [ -n "${HAVE_ENVE_PATHUTILS:-}" ]; then
    return 0
fi
HAVE_ENVE_PATHUTILS=1


readlink_posix() {
    # readlink '.' or '..' always return 1
    (
        # shellcheck disable=2012 disable=2010
        if ! links="$(ls -ld "$@" | grep " -> ")"; then
            return 1
        else
            printf %s\\n "$links" | sed 's|.* -> ||'
        fi
    )
}

ensure_readlink_command() {
    if [ -n "${ENVE_READLINK:-}" ]; then
        return 0
    elif command -v 'readlink' >/dev/null; then
        ENVE_READLINK='readlink'
    elif command -v 'greadlink' >/dev/null; then
        ENVE_READLINK='greadlink'
    else
        ENVE_READLINK="readlink_posix"
    fi    
}

split_path() {
    # "$dirpath/$basepath" is same mean as "$1"

    [ -n "$1" ] || return 1
    dirpath="${1%/*}"
    if [ "$dirpath" = "" ]; then
        # "$1" = "/" (filesystem root)
        basepath="."
        dirpath=""
    # elif [ "$dirpath" = "." ] || [ "$dirpath" = ".." ]; then
    #     # basepath="."
    #     basepath="${1##*/}"
    elif [ "$dirpath" = "$1" ]; then
        basepath="$dirpath"
        dirpath="."
    else
        basepath="${1##*/}"
    fi
}

rsplit_path() {
    # "$headpath/$tailpath" is same mean as "$1"

    [ -n "$1" ] || return 1
    tailpath="${1#*/}"
    # if [ "$tailpath" = "." ] || [ "$tailpath" = ".." ]; then
    #     headpath="."
    if [ "$tailpath" = "$1" ]; then
        headpath="."
    else
        headpath="${1%%/*}"
    fi
}

_cd_target() {
    split_path "$TARGET" || return 1
    NAME="$basepath"
    # cd "${dirpath:-/}" 2>/dev/null || return 1
    cd "${dirpath:-/}" || return 1
}

resolve_symlinks() {
    # If $1 is a symlink, follow it as many times as possible, return absolute path

    ensure_readlink_command
    (
        TARGET="$1"
        _cd_target || return 1
        # Iterate down a (possible) chain of symlinks
        while [ -L "$NAME" ]
        do
            TARGET="$($ENVE_READLINK "$NAME")" || return 1
            _cd_target || return 1
        done

        if [ "$NAME" = ".." ]; then
            echo "$(cd "$(pwd -P)/.."; pwd)" || {
                echo "cannot change directory" >&2
                return 1
            }
        elif [ "$NAME" = "." ]; then
            pwd -P
        else
            parent="$(pwd -P)"
            if [ "$parent" = "/" ]; then
                echo "$parent$NAME"
            else
                echo "$parent/$NAME"
            fi
        fi
    )
}

normalize() {
    # (
        path=${1:-}
        nonfast=${2:-nonfast}
        tailslash=
        if [ -n "$path" ] && [ -z "${path##*/}" ]; then
            tailslash=/
        fi
        set --
        OLDIFS=$IFS
        IFS=/
        for c in $path; do
            IFS=$OLDIFS
            case $c in
                '')
                        if [ $# -eq 0 ]; then
                            # leading empty componment on absolute path
                            set -- "$c" "$@"
                        fi
                    ;;
                .)
                        if [ $# -eq 0 ]; then
                            # leading '.' componment on explicit relative path
                            set -- "$c" "$@"
                        fi
                    ;;
                ..)
                        if [ $# -eq 0 ]; then
                            # leading '..' componment on relative path
                            set -- "$c" "$@"
                        else
                            prev="$1"
                            if [ "$prev" = ".." ]; then
                                set -- "$c" "$@"
                            elif [ "$prev" = "." ]; then
                                shift
                                set -- "$c" "$@"
                            elif [ "$prev" = "" ]; then
                                # should not back on root
                                :
                            else
                                shift
                                if [ $# -eq 0 ]; then
                                    # back to current directory at relative path
                                    set -- "." "$@"
                                fi
                            fi
                        fi
                    ;;
                *)
                        set -- "$c" "$@"
                    ;;
            esac
        done

        if [ -n "$tailslash" ]; then
            set -- "" "$@"
        fi

        if [ $# -eq 0 ]; then
            ret=
        elif [ -z "$1" ] && [ $# -eq 1 ]; then
            ret="/"
        else
            ret="$1"
            shift
            for c; do
                ret="$c/$ret"
            done
            
        fi
        if [ "$nonfast" = "nonfast" ]; then
            echo "$ret"
        fi
    # )
}


follow_one() {
    # "$1" must be a absolute path,
    # and not contain any symlink componment except last componment
    dst=$1

    if [ -L "$dst" ]; then
        # resolve_parts "$(normalize "$dst/..")" "$($ENVE_READLINK "$dst")"
        
        # normalize "$dst/.." fast
        dstdir=${dst%/*}
        if [ -z "$dstdir" ]; then
            dstdir=/
        fi
        resolve_parts "$dstdir" "$($ENVE_READLINK "$dst")" fast || {
            return 1
        }
    else
        normalize "$dst" fast || {
            return 1
        }
    fi
    if [ "${2:-nonfast}" = "nonfast" ]; then
        echo "$ret"
    fi
}

follow_directory_fast() {
    # ret="$(follow_one "$1")"
    follow_one "$1" fast || {
        return 1
    }
    # respect 'realpath' and 'readlink -f' behavier
    if [ ! -d "$ret" ]; then
        return 1
    fi
}


resolve_parts() {
    # resolve $2 (unknown) to $1 (known)
    # if the known part is absolute path, then known part must not contain any symlink componment
    #
    # example:
    # (resolve_parts "1/2/3" "4/5")
    #  -> (resolve_parts "1/2/3/4" "5")
    #  -> "1/2/3/4/5"
    
    if [ "$infcnt" -gt 100 ]; then
        echo "too many chain of symlinks" >&2
        return 1
    fi
    infcnt=$((infcnt + 1))

    known="$1"
    unknown="$2"

    # echo "resolve_parts:($known):($unknown)" >&2

    rsplit_path "$unknown" || return 1

    if [ "$headpath" = "" ] && [ "$tailpath" = "" ]; then
        # unknown is root
        ret="/"
    elif [ "$headpath" = "" ]; then
        # unknown is abspath
        resolve_parts "/" "$tailpath" fast
    else
        # resolve known part if that is not absolute path
        if [ "${known%${known#?}}" != "/" ]; then
            split_path "$known"
            abs="$(cd "$dirpath"; pwd)" || {
                echo "cannot change directory" >&2
                return 1
            }
            known=$(resolve_parts "/" "$abs/$basepath") || {
                # echo "XXXX" >&2
                return 1
            }
        elif [ "$known" = "/" ]; then
            known=
        fi

        if [ "$tailpath" = "" ]; then
            # unknown is the only last componment and user indicate that last componment is a directory
            # example: this/must/be_dir/
            follow_directory_fast "$known/$headpath" || return 1
        elif [ "$headpath" = "." ]; then
            # unknown is the only last componment
            follow_one "$known/$tailpath" fast || return 1
        else
            # unknown is a relative path contain more then two componments
            # new_known="$(follow_directory "$known/$headpath")" || return 1
            set -- "$1" "$2" "${3:-}" "$tailpath"
            follow_directory_fast "$known/$headpath" || {
                return 1
            }
            new_known=$ret
            tailpath=$4
            resolve_parts "$new_known" "$tailpath" fast || {
                return 1
            }
        fi
    fi
    if [ "${3:-nonfast}" = "nonfast" ]; then
        echo "$ret"
    fi
}

canonicalize_symlinks() {

    # example: /a/b/../c
    #
    # 1. resolve as $(readlink /a/c)   
    # 2. cd to /a/b/.. == /a;  resolve $(readlink c)
    #
    # but, if /a/b is a symlink to /e/f
    # must to resolve as /e/c
    # therefore solution 2 is correct.
    #
    # there is how it work
    # /a/b/../c should resolve as r(r(r(r(/a)/b)/..)/c)

    ensure_readlink_command
    infcnt=0
    resolve_parts "." "$1"
}
